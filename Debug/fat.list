
fat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e9c  20000014  0800614c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012eb0  0800614c  00022eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135c7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002947  00000000  00000000  0003360b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e99  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d0e0  00000000  00000000  0005a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2393  00000000  00000000  000671c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013955c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf0  00000000  00000000  001395d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060d0 	.word	0x080060d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080060d0 	.word	0x080060d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fccb 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f831 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	MX_GPIO_Init();
 80004de:	f000 f8ed 	bl	80006bc <MX_GPIO_Init>
  	MX_SPI1_Init();
 80004e2:	f000 f88b 	bl	80005fc <MX_SPI1_Init>
  	MX_UART4_Init();
 80004e6:	f000 f8bf 	bl	8000668 <MX_UART4_Init>
  	initMEMS();
 80004ea:	f000 f9ed 	bl	80008c8 <initMEMS>
  /* USER CODE BEGIN 2 */




	xSemaphore = xSemaphoreCreateBinary();
 80004ee:	2203      	movs	r2, #3
 80004f0:	2100      	movs	r1, #0
 80004f2:	2001      	movs	r0, #1
 80004f4:	f003 faa4 	bl	8003a40 <xQueueGenericCreate>
 80004f8:	4602      	mov	r2, r0
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <main+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
	xTaskCreate(Task1,"task1",130,NULL,1,NULL);
 80004fe:	2300      	movs	r3, #0
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2282      	movs	r2, #130	; 0x82
 800050a:	4909      	ldr	r1, [pc, #36]	; (8000530 <main+0x60>)
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x64>)
 800050e:	f004 f8b5 	bl	800467c <xTaskCreate>
	xTaskCreate(Task2,"task2",130,NULL,2,NULL);
 8000512:	2300      	movs	r3, #0
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2302      	movs	r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2282      	movs	r2, #130	; 0x82
 800051e:	4906      	ldr	r1, [pc, #24]	; (8000538 <main+0x68>)
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x6c>)
 8000522:	f004 f8ab 	bl	800467c <xTaskCreate>
//	xTaskCreate(Task2,"task1",128,NULL,1,NULL);

//	gg=xQueueCreate(1,1);
	vTaskStartScheduler();
 8000526:	f004 fa1b 	bl	8004960 <vTaskStartScheduler>
	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x5a>
 800052c:	20012d90 	.word	0x20012d90
 8000530:	080060e8 	.word	0x080060e8
 8000534:	080007b9 	.word	0x080007b9
 8000538:	080060f0 	.word	0x080060f0
 800053c:	080007d9 	.word	0x080007d9

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fdb5 	bl	80060be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xb4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <SystemClock_Config+0xb8>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 ff89 	bl	80014c8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 fadc 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f9e4 	bl	80019a8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e6:	f000 fac7 	bl	8000b78 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_SPI1_Init+0x64>)
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <MX_SPI1_Init+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_SPI1_Init+0x64>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_SPI1_Init+0x64>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_SPI1_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SPI1_Init+0x64>)
 8000648:	220a      	movs	r2, #10
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_SPI1_Init+0x64>)
 800064e:	f001 fba9 	bl	8001da4 <HAL_SPI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000658:	f000 fa8e 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20012dd4 	.word	0x20012dd4
 8000664:	40013000 	.word	0x40013000

08000668 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_UART4_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_UART4_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_UART4_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_UART4_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_UART4_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_UART4_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_UART4_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_UART4_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_UART4_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_UART4_Init+0x4c>)
 80006a0:	f002 fb12 	bl	8002cc8 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 fa65 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20012d94 	.word	0x20012d94
 80006b8:	40004c00 	.word	0x40004c00

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <MX_GPIO_Init+0xec>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a33      	ldr	r2, [pc, #204]	; (80007a8 <MX_GPIO_Init+0xec>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <MX_GPIO_Init+0xec>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xec>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a2c      	ldr	r2, [pc, #176]	; (80007a8 <MX_GPIO_Init+0xec>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xec>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xec>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xec>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xec>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2108      	movs	r1, #8
 800072a:	4820      	ldr	r0, [pc, #128]	; (80007ac <MX_GPIO_Init+0xf0>)
 800072c:	f000 fe80 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000736:	481e      	ldr	r0, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xf4>)
 8000738:	f000 fe7a 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800073c:	2308      	movs	r3, #8
 800073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_GPIO_Init+0xf0>)
 8000754:	f000 fcd2 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000758:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <MX_GPIO_Init+0xf4>)
 8000772:	f000 fcc3 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_GPIO_Init+0xf8>)
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0xf0>)
 800078a:	f000 fcb7 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210a      	movs	r1, #10
 8000792:	2006      	movs	r0, #6
 8000794:	f000 fc88 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000798:	2006      	movs	r0, #6
 800079a:	f000 fca1 	bl	80010e0 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	10110000 	.word	0x10110000

080007b8 <Task1>:

/* USER CODE BEGIN 4 */
void Task1( void *pvParameters ){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <Task1+0x1c>)
 80007c6:	f000 fe4c 	bl	8001462 <HAL_GPIO_TogglePin>

		vTaskDelay(100);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f004 f894 	bl	80048f8 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80007d0:	e7f6      	b.n	80007c0 <Task1+0x8>
 80007d2:	bf00      	nop
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <Task2>:
	}


}

void Task2( void *pvParameters ){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

	for(;;){
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <Task2+0xe4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fcbb 	bl	8004164 <xQueueSemaphoreTake>
		flag=pdFALSE;
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <Task2+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fa:	4832      	ldr	r0, [pc, #200]	; (80008c4 <Task2+0xec>)
 80007fc:	f000 fe18 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <Task2+0xec>)
 8000806:	f000 fe2c 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f000 fb71 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	482b      	ldr	r0, [pc, #172]	; (80008c4 <Task2+0xec>)
 8000818:	f000 fe23 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800081c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000820:	f000 fb68 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4826      	ldr	r0, [pc, #152]	; (80008c4 <Task2+0xec>)
 800082a:	f000 fe1a 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000832:	f000 fb5f 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4822      	ldr	r0, [pc, #136]	; (80008c4 <Task2+0xec>)
 800083c:	f000 fe11 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000844:	f000 fb56 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <Task2+0xec>)
 800084e:	f000 fe08 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 fb4d 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4819      	ldr	r0, [pc, #100]	; (80008c4 <Task2+0xec>)
 8000860:	f000 fdff 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f000 fb44 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800086c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000870:	4814      	ldr	r0, [pc, #80]	; (80008c4 <Task2+0xec>)
 8000872:	f000 fdf6 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f000 fb3b 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <Task2+0xec>)
 8000884:	f000 fded 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f000 fb32 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8000890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <Task2+0xec>)
 8000896:	f000 fde4 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089e:	f000 fb29 	bl	8000ef4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <Task2+0xec>)
 80008a8:	f000 fddb 	bl	8001462 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f000 fb20 	bl	8000ef4 <HAL_Delay>
		flag=pdTRUE;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <Task2+0xe8>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 80008ba:	e791      	b.n	80007e0 <Task2+0x8>
 80008bc:	20012d90 	.word	0x20012d90
 80008c0:	20000000 	.word	0x20000000
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <initMEMS>:
	}


}

void initMEMS(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	uint8_t data[1];
	  	uint8_t ads[1];

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4876      	ldr	r0, [pc, #472]	; (8000aac <initMEMS+0x1e4>)
 80008d4:	f000 fdac 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG1_ADDR;
 80008d8:	2321      	movs	r3, #33	; 0x21
 80008da:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80008dc:	1d39      	adds	r1, r7, #4
 80008de:	230a      	movs	r3, #10
 80008e0:	2201      	movs	r2, #1
 80008e2:	4873      	ldr	r0, [pc, #460]	; (8000ab0 <initMEMS+0x1e8>)
 80008e4:	f001 fac2 	bl	8001e6c <HAL_SPI_Transmit>
		ads[0]=0x01;
 80008e8:	2301      	movs	r3, #1
 80008ea:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80008ec:	4639      	mov	r1, r7
 80008ee:	230a      	movs	r3, #10
 80008f0:	2201      	movs	r2, #1
 80008f2:	486f      	ldr	r0, [pc, #444]	; (8000ab0 <initMEMS+0x1e8>)
 80008f4:	f001 faba 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2108      	movs	r1, #8
 80008fc:	486b      	ldr	r0, [pc, #428]	; (8000aac <initMEMS+0x1e4>)
 80008fe:	f000 fd97 	bl	8001430 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	4869      	ldr	r0, [pc, #420]	; (8000aac <initMEMS+0x1e4>)
 8000908:	f000 fd92 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG3_ADDR;
 800090c:	2323      	movs	r3, #35	; 0x23
 800090e:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000910:	1d39      	adds	r1, r7, #4
 8000912:	230a      	movs	r3, #10
 8000914:	2201      	movs	r2, #1
 8000916:	4866      	ldr	r0, [pc, #408]	; (8000ab0 <initMEMS+0x1e8>)
 8000918:	f001 faa8 	bl	8001e6c <HAL_SPI_Transmit>
		ads[0]=0x48;
 800091c:	2348      	movs	r3, #72	; 0x48
 800091e:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000920:	4639      	mov	r1, r7
 8000922:	230a      	movs	r3, #10
 8000924:	2201      	movs	r2, #1
 8000926:	4862      	ldr	r0, [pc, #392]	; (8000ab0 <initMEMS+0x1e8>)
 8000928:	f001 faa0 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2108      	movs	r1, #8
 8000930:	485e      	ldr	r0, [pc, #376]	; (8000aac <initMEMS+0x1e4>)
 8000932:	f000 fd7d 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	485c      	ldr	r0, [pc, #368]	; (8000aac <initMEMS+0x1e4>)
 800093c:	f000 fd78 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG4_ADDR;
 8000940:	2320      	movs	r3, #32
 8000942:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000944:	1d39      	adds	r1, r7, #4
 8000946:	230a      	movs	r3, #10
 8000948:	2201      	movs	r2, #1
 800094a:	4859      	ldr	r0, [pc, #356]	; (8000ab0 <initMEMS+0x1e8>)
 800094c:	f001 fa8e 	bl	8001e6c <HAL_SPI_Transmit>
		ads[0]=0x67;
 8000950:	2367      	movs	r3, #103	; 0x67
 8000952:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000954:	4639      	mov	r1, r7
 8000956:	230a      	movs	r3, #10
 8000958:	2201      	movs	r2, #1
 800095a:	4855      	ldr	r0, [pc, #340]	; (8000ab0 <initMEMS+0x1e8>)
 800095c:	f001 fa86 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2108      	movs	r1, #8
 8000964:	4851      	ldr	r0, [pc, #324]	; (8000aac <initMEMS+0x1e4>)
 8000966:	f000 fd63 	bl	8001430 <HAL_GPIO_WritePin>
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	data[0]=0x00;
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2108      	movs	r1, #8
 800096e:	484f      	ldr	r0, [pc, #316]	; (8000aac <initMEMS+0x1e4>)
 8000970:	f000 fd5e 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_THRS1_1_ADDR;
 8000974:	2357      	movs	r3, #87	; 0x57
 8000976:	713b      	strb	r3, [r7, #4]
		ads[0]=0x55;
 8000978:	2355      	movs	r3, #85	; 0x55
 800097a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 800097c:	1d39      	adds	r1, r7, #4
 800097e:	230a      	movs	r3, #10
 8000980:	2201      	movs	r2, #1
 8000982:	484b      	ldr	r0, [pc, #300]	; (8000ab0 <initMEMS+0x1e8>)
 8000984:	f001 fa72 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000988:	4639      	mov	r1, r7
 800098a:	230a      	movs	r3, #10
 800098c:	2201      	movs	r2, #1
 800098e:	4848      	ldr	r0, [pc, #288]	; (8000ab0 <initMEMS+0x1e8>)
 8000990:	f001 fa6c 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2108      	movs	r1, #8
 8000998:	4844      	ldr	r0, [pc, #272]	; (8000aac <initMEMS+0x1e4>)
 800099a:	f000 fd49 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2108      	movs	r1, #8
 80009a2:	4842      	ldr	r0, [pc, #264]	; (8000aac <initMEMS+0x1e4>)
 80009a4:	f000 fd44 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_1_ADDR;
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	713b      	strb	r3, [r7, #4]
		ads[0]=0x05;
 80009ac:	2305      	movs	r3, #5
 80009ae:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	230a      	movs	r3, #10
 80009b4:	2201      	movs	r2, #1
 80009b6:	483e      	ldr	r0, [pc, #248]	; (8000ab0 <initMEMS+0x1e8>)
 80009b8:	f001 fa58 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009bc:	4639      	mov	r1, r7
 80009be:	230a      	movs	r3, #10
 80009c0:	2201      	movs	r2, #1
 80009c2:	483b      	ldr	r0, [pc, #236]	; (8000ab0 <initMEMS+0x1e8>)
 80009c4:	f001 fa52 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2108      	movs	r1, #8
 80009cc:	4837      	ldr	r0, [pc, #220]	; (8000aac <initMEMS+0x1e4>)
 80009ce:	f000 fd2f 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	4835      	ldr	r0, [pc, #212]	; (8000aac <initMEMS+0x1e4>)
 80009d8:	f000 fd2a 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_2_ADDR;
 80009dc:	2341      	movs	r3, #65	; 0x41
 80009de:	713b      	strb	r3, [r7, #4]
		ads[0]=0x11;
 80009e0:	2311      	movs	r3, #17
 80009e2:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009e4:	1d39      	adds	r1, r7, #4
 80009e6:	230a      	movs	r3, #10
 80009e8:	2201      	movs	r2, #1
 80009ea:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <initMEMS+0x1e8>)
 80009ec:	f001 fa3e 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009f0:	4639      	mov	r1, r7
 80009f2:	230a      	movs	r3, #10
 80009f4:	2201      	movs	r2, #1
 80009f6:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <initMEMS+0x1e8>)
 80009f8:	f001 fa38 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2108      	movs	r1, #8
 8000a00:	482a      	ldr	r0, [pc, #168]	; (8000aac <initMEMS+0x1e4>)
 8000a02:	f000 fd15 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2108      	movs	r1, #8
 8000a0a:	4828      	ldr	r0, [pc, #160]	; (8000aac <initMEMS+0x1e4>)
 8000a0c:	f000 fd10 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_B_ADDR;
 8000a10:	2359      	movs	r3, #89	; 0x59
 8000a12:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000a14:	23fc      	movs	r3, #252	; 0xfc
 8000a16:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4824      	ldr	r0, [pc, #144]	; (8000ab0 <initMEMS+0x1e8>)
 8000a20:	f001 fa24 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a24:	4639      	mov	r1, r7
 8000a26:	230a      	movs	r3, #10
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4821      	ldr	r0, [pc, #132]	; (8000ab0 <initMEMS+0x1e8>)
 8000a2c:	f001 fa1e 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2108      	movs	r1, #8
 8000a34:	481d      	ldr	r0, [pc, #116]	; (8000aac <initMEMS+0x1e4>)
 8000a36:	f000 fcfb 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <initMEMS+0x1e4>)
 8000a40:	f000 fcf6 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_A_ADDR;
 8000a44:	235a      	movs	r3, #90	; 0x5a
 8000a46:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000a48:	23fc      	movs	r3, #252	; 0xfc
 8000a4a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	230a      	movs	r3, #10
 8000a50:	2201      	movs	r2, #1
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <initMEMS+0x1e8>)
 8000a54:	f001 fa0a 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a58:	4639      	mov	r1, r7
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <initMEMS+0x1e8>)
 8000a60:	f001 fa04 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2108      	movs	r1, #8
 8000a68:	4810      	ldr	r0, [pc, #64]	; (8000aac <initMEMS+0x1e4>)
 8000a6a:	f000 fce1 	bl	8001430 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <initMEMS+0x1e4>)
 8000a74:	f000 fcdc 	bl	8001430 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_SETT1_ADDR;
 8000a78:	235b      	movs	r3, #91	; 0x5b
 8000a7a:	713b      	strb	r3, [r7, #4]
		ads[0]=0x01;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a80:	1d39      	adds	r1, r7, #4
 8000a82:	230a      	movs	r3, #10
 8000a84:	2201      	movs	r2, #1
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <initMEMS+0x1e8>)
 8000a88:	f001 f9f0 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	230a      	movs	r3, #10
 8000a90:	2201      	movs	r2, #1
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <initMEMS+0x1e8>)
 8000a94:	f001 f9ea 	bl	8001e6c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <initMEMS+0x1e4>)
 8000a9e:	f000 fcc7 	bl	8001430 <HAL_GPIO_WritePin>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	20012dd4 	.word	0x20012dd4

08000ab4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	 if(GPIO_Pin == GPIO_PIN_0)
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d137      	bne.n	8000b34 <HAL_GPIO_EXTI_Callback+0x80>
	 {
		 xHigherPriorityTaskWoken = pdFALSE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
		 if(flag==pdTRUE){
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x88>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d107      	bne.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x2c>
			 xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 f9cf 	bl	8003e7e <xQueueGiveFromISR>
		 }else{
			 //do nothing
		 }

		 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x90>)
 8000ae6:	f000 fcbc 	bl	8001462 <HAL_GPIO_TogglePin>
		 uint8_t data_1=0x5f|0x80;
 8000aea:	23df      	movs	r3, #223	; 0xdf
 8000aec:	72fb      	strb	r3, [r7, #11]
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	4815      	ldr	r0, [pc, #84]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x94>)
 8000af4:	f000 fc9c 	bl	8001430 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1,&data_1,1,10);
 8000af8:	f107 010b 	add.w	r1, r7, #11
 8000afc:	230a      	movs	r3, #10
 8000afe:	2201      	movs	r2, #1
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b02:	f001 f9b3 	bl	8001e6c <HAL_SPI_Transmit>
		  ////	HAL_Delay(10);
		 HAL_SPI_Receive(&hspi1,&data_1,1,10);
 8000b06:	f107 010b 	add.w	r1, r7, #11
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b10:	f001 fae0 	bl	80020d4 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2108      	movs	r1, #8
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b1a:	f000 fc89 	bl	8001430 <HAL_GPIO_WritePin>
		 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_EXTI_Callback+0x80>
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	f3bf 8f4f 	dsb	sy
 8000b30:	f3bf 8f6f 	isb	sy
	 }


}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20012d90 	.word	0x20012d90
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	20012dd4 	.word	0x20012dd4
 8000b50:	e000ed04 	.word	0xe000ed04

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 f9a5 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <Error_Handler+0x6>

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_SPI_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_SPI_MspInit+0x8c>)
 8000c46:	f000 fa59 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x8c>)
 8000cd6:	f000 fa11 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40004c00 	.word	0x40004c00
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	2036      	movs	r0, #54	; 0x36
 8000d06:	f000 f9cf 	bl	80010a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d0a:	2036      	movs	r0, #54	; 0x36
 8000d0c:	f000 f9e8 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_InitTick+0xa0>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_InitTick+0xa0>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_InitTick+0xa0>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2c:	f107 0210 	add.w	r2, r7, #16
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f802 	bl	8001d40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3c:	f000 ffd8 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8000d40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <HAL_InitTick+0xa4>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_InitTick+0xac>)
 8000d54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d72:	f001 fd6b 	bl	800284c <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HAL_InitTick+0xa8>)
 8000d7e:	f001 fd9a 	bl	80028b6 <HAL_TIM_Base_Start_IT>
 8000d82:	4603      	mov	r3, r0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3730      	adds	r7, #48	; 0x30
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	20012e2c 	.word	0x20012e2c
 8000d9c:	40001000 	.word	0x40001000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 fb61 	bl	8001498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM6_DAC_IRQHandler+0x10>)
 8000de2:	f001 fd8c 	bl	80028fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20012e2c 	.word	0x20012e2c

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <SystemInit+0x28>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <SystemInit+0x28>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SystemInit+0x28>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
  ldr  r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e3c:	f842 3b04 	str.w	r3, [r2], #4

08000e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd3 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f005 f909 	bl	8006060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb3f 	bl	80004d0 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e58:	08006138 	.word	0x08006138
  ldr  r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e60:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000e64:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000e68:	20012eb0 	.word	0x20012eb0

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f8fa 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ff26 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe6c 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	20012e6c 	.word	0x20012e6c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20012e6c 	.word	0x20012e6c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_Delay+0x40>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000000c 	.word	0x2000000c

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e16b      	b.n	80013f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 815a 	bne.w	80013ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00b      	beq.n	8001156 <HAL_GPIO_Init+0x5a>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114a:	2b11      	cmp	r3, #17
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0xfc>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b12      	cmp	r3, #18
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80b4 	beq.w	80013ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_GPIO_Init+0x308>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_GPIO_Init+0x308>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_GPIO_Init+0x308>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a5a      	ldr	r2, [pc, #360]	; (8001408 <HAL_GPIO_Init+0x30c>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x310>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x222>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x318>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x31c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x320>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x324>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x328>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x20e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4a      	ldr	r2, [pc, #296]	; (8001428 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x20a>
 8001302:	2307      	movs	r3, #7
 8001304:	e00e      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001306:	2308      	movs	r3, #8
 8001308:	e00c      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130a:	2306      	movs	r3, #6
 800130c:	e00a      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800130e:	2305      	movs	r3, #5
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001312:	2304      	movs	r3, #4
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x228>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x228>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4934      	ldr	r1, [pc, #208]	; (8001408 <HAL_GPIO_Init+0x30c>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_GPIO_Init+0x330>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_GPIO_Init+0x330>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x330>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_GPIO_Init+0x330>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_GPIO_Init+0x330>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_GPIO_Init+0x330>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_GPIO_Init+0x330>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_GPIO_Init+0x330>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f ae90 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	3724      	adds	r7, #36	; 0x24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40023800 	.word	0x40023800
 8001408:	40013800 	.word	0x40013800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40021000 	.word	0x40021000
 8001420:	40021400 	.word	0x40021400
 8001424:	40021800 	.word	0x40021800
 8001428:	40021c00 	.word	0x40021c00
 800142c:	40013c00 	.word	0x40013c00

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	619a      	str	r2, [r3, #24]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	401a      	ands	r2, r3
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	429a      	cmp	r2, r3
 800147a:	d104      	bne.n	8001486 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fafc 	bl	8000ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e25b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4ba3      	ldr	r3, [pc, #652]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b9d      	ldr	r3, [pc, #628]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e236      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a90      	ldr	r2, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b8b      	ldr	r3, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a8a      	ldr	r2, [pc, #552]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a87      	ldr	r2, [pc, #540]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a83      	ldr	r2, [pc, #524]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a80      	ldr	r2, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcac 	bl	8000edc <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fca8 	bl	8000edc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1fb      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc98 	bl	8000edc <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fc94 	bl	8000edc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1e7      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1bb      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4952      	ldr	r1, [pc, #328]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <HAL_RCC_OscConfig+0x2b0>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fc4d 	bl	8000edc <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fc49 	bl	8000edc <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e19c      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4940      	ldr	r1, [pc, #256]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x2b0>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc2c 	bl	8000edc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc28 	bl	8000edc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e17b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d030      	beq.n	8001714 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_RCC_OscConfig+0x2b4>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc0c 	bl	8000edc <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc08 	bl	8000edc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e15b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e015      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x2b4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbf5 	bl	8000edc <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fbf1 	bl	8000edc <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e144      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a0 	beq.w	8001862 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fbb7 	bl	8000edc <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e011      	b.n	8001796 <HAL_RCC_OscConfig+0x2ce>
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	42470000 	.word	0x42470000
 800177c:	42470e80 	.word	0x42470e80
 8001780:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff fbaa 	bl	8000edc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0fd      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x4d4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	e01c      	b.n	80017f2 <HAL_RCC_OscConfig+0x32a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x312>
 80017c0:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0x32a>
 80017da:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d015      	beq.n	8001826 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff fb6f 	bl	8000edc <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fb6b 	bl	8000edc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0bc      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ee      	beq.n	8001802 <HAL_RCC_OscConfig+0x33a>
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7ff fb59 	bl	8000edc <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fb55 	bl	8000edc <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0a6      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d105      	bne.n	8001862 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8092 	beq.w	8001990 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d05c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d141      	bne.n	8001904 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fb29 	bl	8000edc <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fb25 	bl	8000edc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e078      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
 80018d0:	4933      	ldr	r1, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fafe 	bl	8000edc <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fafa 	bl	8000edc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04d      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 8001902:	e045      	b.n	8001990 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fae7 	bl	8000edc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fae3 	bl	8000edc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e036      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x44a>
 8001930:	e02e      	b.n	8001990 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e029      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d115      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d10d      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d106      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470060 	.word	0x42470060

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff fa20 	bl	8000edc <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff fa1c 	bl	8000edc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	fa21 f303 	lsr.w	r3, r1, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8ce 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08006110 	.word	0x08006110
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x38>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 808d 	bne.w	8001cba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ba2:	60bb      	str	r3, [r7, #8]
       break;
 8001ba4:	e08c      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba8:	60bb      	str	r3, [r7, #8]
      break;
 8001baa:	e089      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d023      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	f04f 0400 	mov.w	r4, #0
 8001bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	ea03 0501 	and.w	r5, r3, r1
 8001bd8:	ea04 0602 	and.w	r6, r4, r2
 8001bdc:	4a3d      	ldr	r2, [pc, #244]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bde:	fb02 f106 	mul.w	r1, r2, r6
 8001be2:	2200      	movs	r2, #0
 8001be4:	fb02 f205 	mul.w	r2, r2, r5
 8001be8:	440a      	add	r2, r1
 8001bea:	493a      	ldr	r1, [pc, #232]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bec:	fba5 0101 	umull	r0, r1, r5, r1
 8001bf0:	1853      	adds	r3, r2, r1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f04f 0400 	mov.w	r4, #0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	f7fe fae7 	bl	80001d0 <__aeabi_uldivmod>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e049      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	099b      	lsrs	r3, r3, #6
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	ea03 0501 	and.w	r5, r3, r1
 8001c20:	ea04 0602 	and.w	r6, r4, r2
 8001c24:	4629      	mov	r1, r5
 8001c26:	4632      	mov	r2, r6
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f04f 0400 	mov.w	r4, #0
 8001c30:	0154      	lsls	r4, r2, #5
 8001c32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c36:	014b      	lsls	r3, r1, #5
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	1b49      	subs	r1, r1, r5
 8001c3e:	eb62 0206 	sbc.w	r2, r2, r6
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f04f 0400 	mov.w	r4, #0
 8001c4a:	0194      	lsls	r4, r2, #6
 8001c4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	1a5b      	subs	r3, r3, r1
 8001c54:	eb64 0402 	sbc.w	r4, r4, r2
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	00e2      	lsls	r2, r4, #3
 8001c62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c66:	00d9      	lsls	r1, r3, #3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	195b      	adds	r3, r3, r5
 8001c6e:	eb44 0406 	adc.w	r4, r4, r6
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	02a2      	lsls	r2, r4, #10
 8001c7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c80:	0299      	lsls	r1, r3, #10
 8001c82:	460b      	mov	r3, r1
 8001c84:	4614      	mov	r4, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	4621      	mov	r1, r4
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7fe fa9c 	bl	80001d0 <__aeabi_uldivmod>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x158>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	60bb      	str	r3, [r7, #8]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001cbc:	60bb      	str	r3, [r7, #8]
      break;
 8001cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	017d7840 	.word	0x017d7840

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4601      	mov	r1, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a9b      	lsrs	r3, r3, #10
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	08006120 	.word	0x08006120

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08006120 	.word	0x08006120

08001d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCC_GetClockConfig+0x60>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e056      	b.n	8001e64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fefd 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 0104 	and.w	r1, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_SPI_Transmit+0x22>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e11e      	b.n	80020cc <HAL_SPI_Transmit+0x260>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e96:	f7ff f821 	bl	8000edc <HAL_GetTick>
 8001e9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d002      	beq.n	8001eb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
 8001eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb0:	e103      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_SPI_Transmit+0x52>
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec2:	e0fa      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0a:	d107      	bne.n	8001f1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d007      	beq.n	8001f3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f42:	d14b      	bne.n	8001fdc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0xe6>
 8001f4c:	8afb      	ldrh	r3, [r7, #22]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d13e      	bne.n	8001fd0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	1c9a      	adds	r2, r3, #2
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f76:	e02b      	b.n	8001fd0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d112      	bne.n	8001fac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	881a      	ldrh	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	1c9a      	adds	r2, r3, #2
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001faa:	e011      	b.n	8001fd0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fac:	f7fe ff96 	bl	8000edc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d803      	bhi.n	8001fc4 <HAL_SPI_Transmit+0x158>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc2:	d102      	bne.n	8001fca <HAL_SPI_Transmit+0x15e>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fce:	e074      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ce      	bne.n	8001f78 <HAL_SPI_Transmit+0x10c>
 8001fda:	e04c      	b.n	8002076 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_SPI_Transmit+0x17e>
 8001fe4:	8afb      	ldrh	r3, [r7, #22]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d140      	bne.n	800206c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002010:	e02c      	b.n	800206c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d113      	bne.n	8002048 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	330c      	adds	r3, #12
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	86da      	strh	r2, [r3, #54]	; 0x36
 8002046:	e011      	b.n	800206c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002048:	f7fe ff48 	bl	8000edc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d803      	bhi.n	8002060 <HAL_SPI_Transmit+0x1f4>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205e:	d102      	bne.n	8002066 <HAL_SPI_Transmit+0x1fa>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	77fb      	strb	r3, [r7, #31]
          goto error;
 800206a:	e026      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1cd      	bne.n	8002012 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fba4 	bl	80027c8 <SPI_EndRxTxTransaction>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	77fb      	strb	r3, [r7, #31]
 80020b6:	e000      	b.n	80020ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80020b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f0:	d112      	bne.n	8002118 <HAL_SPI_Receive+0x44>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2204      	movs	r2, #4
 80020fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8e9 	bl	80022e6 <HAL_SPI_TransmitReceive>
 8002114:	4603      	mov	r3, r0
 8002116:	e0e2      	b.n	80022de <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_SPI_Receive+0x52>
 8002122:	2302      	movs	r3, #2
 8002124:	e0db      	b.n	80022de <HAL_SPI_Receive+0x20a>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800212e:	f7fe fed5 	bl	8000edc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d002      	beq.n	8002146 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002144:	e0c2      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_SPI_Receive+0x7e>
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002156:	e0b9      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2204      	movs	r2, #4
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219e:	d107      	bne.n	80021b0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d007      	beq.n	80021ce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d162      	bne.n	800229c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021d6:	e02e      	b.n	8002236 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d115      	bne.n	8002212 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f103 020c 	add.w	r2, r3, #12
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002210:	e011      	b.n	8002236 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002212:	f7fe fe63 	bl	8000edc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d803      	bhi.n	800222a <HAL_SPI_Receive+0x156>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002228:	d102      	bne.n	8002230 <HAL_SPI_Receive+0x15c>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002234:	e04a      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1cb      	bne.n	80021d8 <HAL_SPI_Receive+0x104>
 8002240:	e031      	b.n	80022a6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d113      	bne.n	8002278 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	b292      	uxth	r2, r2
 800225c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	1c9a      	adds	r2, r3, #2
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002276:	e011      	b.n	800229c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002278:	f7fe fe30 	bl	8000edc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d803      	bhi.n	8002290 <HAL_SPI_Receive+0x1bc>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Receive+0x1c2>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	75fb      	strb	r3, [r7, #23]
          goto error;
 800229a:	e017      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1cd      	bne.n	8002242 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa27 	bl	80026fe <SPI_EndRxTransaction>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
 80022c8:	e000      	b.n	80022cc <HAL_SPI_Receive+0x1f8>
  }

error :
 80022ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08c      	sub	sp, #48	; 0x30
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_SPI_TransmitReceive+0x26>
 8002308:	2302      	movs	r3, #2
 800230a:	e18a      	b.n	8002622 <HAL_SPI_TransmitReceive+0x33c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002314:	f7fe fde2 	bl	8000edc <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002332:	2b01      	cmp	r3, #1
 8002334:	d00f      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x70>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233c:	d107      	bne.n	800234e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <HAL_SPI_TransmitReceive+0x68>
 8002346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002354:	e15b      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x82>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x82>
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800236e:	e14e      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b04      	cmp	r3, #4
 800237a:	d003      	beq.n	8002384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2205      	movs	r2, #5
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d007      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e0:	d178      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x10a>
 80023ea:	8b7b      	ldrh	r3, [r7, #26]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d166      	bne.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002414:	e053      	b.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d11b      	bne.n	800245c <HAL_SPI_TransmitReceive+0x176>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_SPI_TransmitReceive+0x176>
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d113      	bne.n	800245c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d119      	bne.n	800249e <HAL_SPI_TransmitReceive+0x1b8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d014      	beq.n	800249e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	b292      	uxth	r2, r2
 8002480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800249a:	2301      	movs	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800249e:	f7fe fd1d 	bl	8000edc <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d807      	bhi.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d003      	beq.n	80024be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024bc:	e0a7      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1a6      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x130>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1a1      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x130>
 80024d2:	e07c      	b.n	80025ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x1fc>
 80024dc:	8b7b      	ldrh	r3, [r7, #26]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d16b      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002508:	e057      	b.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d11c      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d017      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d114      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d119      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x2ae>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d014      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002594:	f7fe fca2 	bl	8000edc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d803      	bhi.n	80025ac <HAL_SPI_TransmitReceive+0x2c6>
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025aa:	d102      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x2cc>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025b8:	e029      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1a2      	bne.n	800250a <HAL_SPI_TransmitReceive+0x224>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d19d      	bne.n	800250a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f8f8 	bl	80027c8 <SPI_EndRxTxTransaction>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025ea:	e010      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	e000      	b.n	800260e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800260c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800261e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002622:	4618      	mov	r0, r3
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263a:	e04c      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002642:	d048      	beq.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002644:	f7fe fc4a 	bl	8000edc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d902      	bls.n	800265a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002672:	d111      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	d004      	beq.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d107      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a0:	d10f      	bne.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e00f      	b.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1a3      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af02      	add	r7, sp, #8
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002712:	d111      	bne.n	8002738 <SPI_EndRxTransaction+0x3a>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271c:	d004      	beq.n	8002728 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d107      	bne.n	8002738 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002740:	d12a      	bne.n	8002798 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d012      	beq.n	8002772 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff ff67 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02d      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e026      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	2101      	movs	r1, #1
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ff54 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01a      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e013      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	2101      	movs	r1, #1
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff ff41 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e000      	b.n	80027c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <SPI_EndRxTxTransaction+0x7c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <SPI_EndRxTxTransaction+0x80>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0d5b      	lsrs	r3, r3, #21
 80027e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f2:	d112      	bne.n	800281a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff ff13 	bl	800262a <SPI_WaitFlagStateUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0220 	orr.w	r2, r3, #32
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3b01      	subs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d0f2      	beq.n	800281a <SPI_EndRxTxTransaction+0x52>
 8002834:	e000      	b.n	8002838 <SPI_EndRxTxTransaction+0x70>
        break;
 8002836:	bf00      	nop
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000004 	.word	0x20000004
 8002848:	165e9f81 	.word	0x165e9f81

0800284c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e01d      	b.n	800289a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f815 	bl	80028a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f000 f968 	bl	8002b60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d007      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d122      	bne.n	800295a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d11b      	bne.n	800295a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0202 	mvn.w	r2, #2
 800292a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8ee 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 8002946:	e005      	b.n	8002954 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8e0 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8f1 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d122      	bne.n	80029ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d11b      	bne.n	80029ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0204 	mvn.w	r2, #4
 800297e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8c4 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 800299a:	e005      	b.n	80029a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f8b6 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8c7 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d122      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11b      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0208 	mvn.w	r2, #8
 80029d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f89a 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 80029ee:	e005      	b.n	80029fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f88c 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f89d 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0210 	mvn.w	r2, #16
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f870 	bl	8002b22 <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f862 	bl	8002b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f873 	bl	8002b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10e      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d107      	bne.n	8002a82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0201 	mvn.w	r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fe f869 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d10e      	bne.n	8002aae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d107      	bne.n	8002aae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f903 	bl	8002cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d10e      	bne.n	8002ada <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d107      	bne.n	8002ada <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f838 	bl	8002b4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d10e      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d107      	bne.n	8002b06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f06f 0220 	mvn.w	r2, #32
 8002afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8cd 	bl	8002ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <TIM_Base_SetConfig+0x114>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d013      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7e:	d00f      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <TIM_Base_SetConfig+0x118>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <TIM_Base_SetConfig+0x11c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <TIM_Base_SetConfig+0x120>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <TIM_Base_SetConfig+0x124>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d108      	bne.n	8002bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <TIM_Base_SetConfig+0x114>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d027      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <TIM_Base_SetConfig+0x118>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d023      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <TIM_Base_SetConfig+0x11c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <TIM_Base_SetConfig+0x120>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01b      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <TIM_Base_SetConfig+0x124>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d017      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <TIM_Base_SetConfig+0x128>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <TIM_Base_SetConfig+0x12c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00f      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <TIM_Base_SetConfig+0x130>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00b      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <TIM_Base_SetConfig+0x134>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <TIM_Base_SetConfig+0x138>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <TIM_Base_SetConfig+0x13c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <TIM_Base_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0xf8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <TIM_Base_SetConfig+0x124>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d103      	bne.n	8002c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	615a      	str	r2, [r3, #20]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800
 8002c94:	40001800 	.word	0x40001800
 8002c98:	40001c00 	.word	0x40001c00
 8002c9c:	40002000 	.word	0x40002000

08002ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e03f      	b.n	8002d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd ffb6 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f829 	bl	8002d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002da6:	f023 030c 	bic.w	r3, r3, #12
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd2:	f040 818b 	bne.w	80030ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4ac1      	ldr	r2, [pc, #772]	; (80030e0 <UART_SetConfig+0x37c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0x88>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4abf      	ldr	r2, [pc, #764]	; (80030e4 <UART_SetConfig+0x380>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	f040 80bd 	bne.w	8002f66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dec:	f7fe ff94 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002df0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	461d      	mov	r5, r3
 8002df6:	f04f 0600 	mov.w	r6, #0
 8002dfa:	46a8      	mov	r8, r5
 8002dfc:	46b1      	mov	r9, r6
 8002dfe:	eb18 0308 	adds.w	r3, r8, r8
 8002e02:	eb49 0409 	adc.w	r4, r9, r9
 8002e06:	4698      	mov	r8, r3
 8002e08:	46a1      	mov	r9, r4
 8002e0a:	eb18 0805 	adds.w	r8, r8, r5
 8002e0e:	eb49 0906 	adc.w	r9, r9, r6
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e26:	4688      	mov	r8, r1
 8002e28:	4691      	mov	r9, r2
 8002e2a:	eb18 0005 	adds.w	r0, r8, r5
 8002e2e:	eb49 0106 	adc.w	r1, r9, r6
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	461d      	mov	r5, r3
 8002e38:	f04f 0600 	mov.w	r6, #0
 8002e3c:	196b      	adds	r3, r5, r5
 8002e3e:	eb46 0406 	adc.w	r4, r6, r6
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	f7fd f9c3 	bl	80001d0 <__aeabi_uldivmod>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4ba5      	ldr	r3, [pc, #660]	; (80030e8 <UART_SetConfig+0x384>)
 8002e52:	fba3 2302 	umull	r2, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	461d      	mov	r5, r3
 8002e60:	f04f 0600 	mov.w	r6, #0
 8002e64:	46a9      	mov	r9, r5
 8002e66:	46b2      	mov	sl, r6
 8002e68:	eb19 0309 	adds.w	r3, r9, r9
 8002e6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e70:	4699      	mov	r9, r3
 8002e72:	46a2      	mov	sl, r4
 8002e74:	eb19 0905 	adds.w	r9, r9, r5
 8002e78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e90:	4689      	mov	r9, r1
 8002e92:	4692      	mov	sl, r2
 8002e94:	eb19 0005 	adds.w	r0, r9, r5
 8002e98:	eb4a 0106 	adc.w	r1, sl, r6
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	461d      	mov	r5, r3
 8002ea2:	f04f 0600 	mov.w	r6, #0
 8002ea6:	196b      	adds	r3, r5, r5
 8002ea8:	eb46 0406 	adc.w	r4, r6, r6
 8002eac:	461a      	mov	r2, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	f7fd f98e 	bl	80001d0 <__aeabi_uldivmod>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <UART_SetConfig+0x384>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4a86      	ldr	r2, [pc, #536]	; (80030e8 <UART_SetConfig+0x384>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002edc:	4498      	add	r8, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	f04f 0600 	mov.w	r6, #0
 8002ee6:	46a9      	mov	r9, r5
 8002ee8:	46b2      	mov	sl, r6
 8002eea:	eb19 0309 	adds.w	r3, r9, r9
 8002eee:	eb4a 040a 	adc.w	r4, sl, sl
 8002ef2:	4699      	mov	r9, r3
 8002ef4:	46a2      	mov	sl, r4
 8002ef6:	eb19 0905 	adds.w	r9, r9, r5
 8002efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f12:	4689      	mov	r9, r1
 8002f14:	4692      	mov	sl, r2
 8002f16:	eb19 0005 	adds.w	r0, r9, r5
 8002f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	461d      	mov	r5, r3
 8002f24:	f04f 0600 	mov.w	r6, #0
 8002f28:	196b      	adds	r3, r5, r5
 8002f2a:	eb46 0406 	adc.w	r4, r6, r6
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	f7fd f94d 	bl	80001d0 <__aeabi_uldivmod>
 8002f36:	4603      	mov	r3, r0
 8002f38:	460c      	mov	r4, r1
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <UART_SetConfig+0x384>)
 8002f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2164      	movs	r1, #100	; 0x64
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <UART_SetConfig+0x384>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 0207 	and.w	r2, r3, #7
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4442      	add	r2, r8
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e26f      	b.n	8003446 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f66:	f7fe fec3 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8002f6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	461d      	mov	r5, r3
 8002f70:	f04f 0600 	mov.w	r6, #0
 8002f74:	46a8      	mov	r8, r5
 8002f76:	46b1      	mov	r9, r6
 8002f78:	eb18 0308 	adds.w	r3, r8, r8
 8002f7c:	eb49 0409 	adc.w	r4, r9, r9
 8002f80:	4698      	mov	r8, r3
 8002f82:	46a1      	mov	r9, r4
 8002f84:	eb18 0805 	adds.w	r8, r8, r5
 8002f88:	eb49 0906 	adc.w	r9, r9, r6
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fa0:	4688      	mov	r8, r1
 8002fa2:	4691      	mov	r9, r2
 8002fa4:	eb18 0005 	adds.w	r0, r8, r5
 8002fa8:	eb49 0106 	adc.w	r1, r9, r6
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	f04f 0600 	mov.w	r6, #0
 8002fb6:	196b      	adds	r3, r5, r5
 8002fb8:	eb46 0406 	adc.w	r4, r6, r6
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	f7fd f906 	bl	80001d0 <__aeabi_uldivmod>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <UART_SetConfig+0x384>)
 8002fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	461d      	mov	r5, r3
 8002fda:	f04f 0600 	mov.w	r6, #0
 8002fde:	46a9      	mov	r9, r5
 8002fe0:	46b2      	mov	sl, r6
 8002fe2:	eb19 0309 	adds.w	r3, r9, r9
 8002fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8002fea:	4699      	mov	r9, r3
 8002fec:	46a2      	mov	sl, r4
 8002fee:	eb19 0905 	adds.w	r9, r9, r5
 8002ff2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800300a:	4689      	mov	r9, r1
 800300c:	4692      	mov	sl, r2
 800300e:	eb19 0005 	adds.w	r0, r9, r5
 8003012:	eb4a 0106 	adc.w	r1, sl, r6
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	461d      	mov	r5, r3
 800301c:	f04f 0600 	mov.w	r6, #0
 8003020:	196b      	adds	r3, r5, r5
 8003022:	eb46 0406 	adc.w	r4, r6, r6
 8003026:	461a      	mov	r2, r3
 8003028:	4623      	mov	r3, r4
 800302a:	f7fd f8d1 	bl	80001d0 <__aeabi_uldivmod>
 800302e:	4603      	mov	r3, r0
 8003030:	460c      	mov	r4, r1
 8003032:	461a      	mov	r2, r3
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <UART_SetConfig+0x384>)
 8003036:	fba3 1302 	umull	r1, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2164      	movs	r1, #100	; 0x64
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	3332      	adds	r3, #50	; 0x32
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <UART_SetConfig+0x384>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003056:	4498      	add	r8, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	461d      	mov	r5, r3
 800305c:	f04f 0600 	mov.w	r6, #0
 8003060:	46a9      	mov	r9, r5
 8003062:	46b2      	mov	sl, r6
 8003064:	eb19 0309 	adds.w	r3, r9, r9
 8003068:	eb4a 040a 	adc.w	r4, sl, sl
 800306c:	4699      	mov	r9, r3
 800306e:	46a2      	mov	sl, r4
 8003070:	eb19 0905 	adds.w	r9, r9, r5
 8003074:	eb4a 0a06 	adc.w	sl, sl, r6
 8003078:	f04f 0100 	mov.w	r1, #0
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800308c:	4689      	mov	r9, r1
 800308e:	4692      	mov	sl, r2
 8003090:	eb19 0005 	adds.w	r0, r9, r5
 8003094:	eb4a 0106 	adc.w	r1, sl, r6
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	461d      	mov	r5, r3
 800309e:	f04f 0600 	mov.w	r6, #0
 80030a2:	196b      	adds	r3, r5, r5
 80030a4:	eb46 0406 	adc.w	r4, r6, r6
 80030a8:	461a      	mov	r2, r3
 80030aa:	4623      	mov	r3, r4
 80030ac:	f7fd f890 	bl	80001d0 <__aeabi_uldivmod>
 80030b0:	4603      	mov	r3, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <UART_SetConfig+0x384>)
 80030b8:	fba3 1302 	umull	r1, r3, r3, r2
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3332      	adds	r3, #50	; 0x32
 80030ca:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <UART_SetConfig+0x384>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4442      	add	r2, r8
 80030dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030de:	e1b2      	b.n	8003446 <UART_SetConfig+0x6e2>
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40011400 	.word	0x40011400
 80030e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4ad7      	ldr	r2, [pc, #860]	; (8003450 <UART_SetConfig+0x6ec>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d005      	beq.n	8003102 <UART_SetConfig+0x39e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4ad6      	ldr	r2, [pc, #856]	; (8003454 <UART_SetConfig+0x6f0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	f040 80d1 	bne.w	80032a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003102:	f7fe fe09 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003106:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	469a      	mov	sl, r3
 800310c:	f04f 0b00 	mov.w	fp, #0
 8003110:	46d0      	mov	r8, sl
 8003112:	46d9      	mov	r9, fp
 8003114:	eb18 0308 	adds.w	r3, r8, r8
 8003118:	eb49 0409 	adc.w	r4, r9, r9
 800311c:	4698      	mov	r8, r3
 800311e:	46a1      	mov	r9, r4
 8003120:	eb18 080a 	adds.w	r8, r8, sl
 8003124:	eb49 090b 	adc.w	r9, r9, fp
 8003128:	f04f 0100 	mov.w	r1, #0
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003134:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003138:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800313c:	4688      	mov	r8, r1
 800313e:	4691      	mov	r9, r2
 8003140:	eb1a 0508 	adds.w	r5, sl, r8
 8003144:	eb4b 0609 	adc.w	r6, fp, r9
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4619      	mov	r1, r3
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	0094      	lsls	r4, r2, #2
 800315c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	461a      	mov	r2, r3
 8003164:	4623      	mov	r3, r4
 8003166:	4628      	mov	r0, r5
 8003168:	4631      	mov	r1, r6
 800316a:	f7fd f831 	bl	80001d0 <__aeabi_uldivmod>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	461a      	mov	r2, r3
 8003174:	4bb8      	ldr	r3, [pc, #736]	; (8003458 <UART_SetConfig+0x6f4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	469b      	mov	fp, r3
 8003184:	f04f 0c00 	mov.w	ip, #0
 8003188:	46d9      	mov	r9, fp
 800318a:	46e2      	mov	sl, ip
 800318c:	eb19 0309 	adds.w	r3, r9, r9
 8003190:	eb4a 040a 	adc.w	r4, sl, sl
 8003194:	4699      	mov	r9, r3
 8003196:	46a2      	mov	sl, r4
 8003198:	eb19 090b 	adds.w	r9, r9, fp
 800319c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031b4:	4689      	mov	r9, r1
 80031b6:	4692      	mov	sl, r2
 80031b8:	eb1b 0509 	adds.w	r5, fp, r9
 80031bc:	eb4c 060a 	adc.w	r6, ip, sl
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f04f 0400 	mov.w	r4, #0
 80031d2:	0094      	lsls	r4, r2, #2
 80031d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031d8:	008b      	lsls	r3, r1, #2
 80031da:	461a      	mov	r2, r3
 80031dc:	4623      	mov	r3, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	4631      	mov	r1, r6
 80031e2:	f7fc fff5 	bl	80001d0 <__aeabi_uldivmod>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b9a      	ldr	r3, [pc, #616]	; (8003458 <UART_SetConfig+0x6f4>)
 80031ee:	fba3 1302 	umull	r1, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2164      	movs	r1, #100	; 0x64
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a95      	ldr	r2, [pc, #596]	; (8003458 <UART_SetConfig+0x6f4>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4498      	add	r8, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	469b      	mov	fp, r3
 8003212:	f04f 0c00 	mov.w	ip, #0
 8003216:	46d9      	mov	r9, fp
 8003218:	46e2      	mov	sl, ip
 800321a:	eb19 0309 	adds.w	r3, r9, r9
 800321e:	eb4a 040a 	adc.w	r4, sl, sl
 8003222:	4699      	mov	r9, r3
 8003224:	46a2      	mov	sl, r4
 8003226:	eb19 090b 	adds.w	r9, r9, fp
 800322a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800323e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003242:	4689      	mov	r9, r1
 8003244:	4692      	mov	sl, r2
 8003246:	eb1b 0509 	adds.w	r5, fp, r9
 800324a:	eb4c 060a 	adc.w	r6, ip, sl
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4619      	mov	r1, r3
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	f04f 0400 	mov.w	r4, #0
 8003260:	0094      	lsls	r4, r2, #2
 8003262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	461a      	mov	r2, r3
 800326a:	4623      	mov	r3, r4
 800326c:	4628      	mov	r0, r5
 800326e:	4631      	mov	r1, r6
 8003270:	f7fc ffae 	bl	80001d0 <__aeabi_uldivmod>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	461a      	mov	r2, r3
 800327a:	4b77      	ldr	r3, [pc, #476]	; (8003458 <UART_SetConfig+0x6f4>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	3332      	adds	r3, #50	; 0x32
 800328e:	4a72      	ldr	r2, [pc, #456]	; (8003458 <UART_SetConfig+0x6f4>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4442      	add	r2, r8
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	e0d0      	b.n	8003446 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7fe fd24 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	469a      	mov	sl, r3
 80032ae:	f04f 0b00 	mov.w	fp, #0
 80032b2:	46d0      	mov	r8, sl
 80032b4:	46d9      	mov	r9, fp
 80032b6:	eb18 0308 	adds.w	r3, r8, r8
 80032ba:	eb49 0409 	adc.w	r4, r9, r9
 80032be:	4698      	mov	r8, r3
 80032c0:	46a1      	mov	r9, r4
 80032c2:	eb18 080a 	adds.w	r8, r8, sl
 80032c6:	eb49 090b 	adc.w	r9, r9, fp
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032de:	4688      	mov	r8, r1
 80032e0:	4691      	mov	r9, r2
 80032e2:	eb1a 0508 	adds.w	r5, sl, r8
 80032e6:	eb4b 0609 	adc.w	r6, fp, r9
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	0094      	lsls	r4, r2, #2
 80032fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	461a      	mov	r2, r3
 8003306:	4623      	mov	r3, r4
 8003308:	4628      	mov	r0, r5
 800330a:	4631      	mov	r1, r6
 800330c:	f7fc ff60 	bl	80001d0 <__aeabi_uldivmod>
 8003310:	4603      	mov	r3, r0
 8003312:	460c      	mov	r4, r1
 8003314:	461a      	mov	r2, r3
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <UART_SetConfig+0x6f4>)
 8003318:	fba3 2302 	umull	r2, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	469b      	mov	fp, r3
 8003326:	f04f 0c00 	mov.w	ip, #0
 800332a:	46d9      	mov	r9, fp
 800332c:	46e2      	mov	sl, ip
 800332e:	eb19 0309 	adds.w	r3, r9, r9
 8003332:	eb4a 040a 	adc.w	r4, sl, sl
 8003336:	4699      	mov	r9, r3
 8003338:	46a2      	mov	sl, r4
 800333a:	eb19 090b 	adds.w	r9, r9, fp
 800333e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003352:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003356:	4689      	mov	r9, r1
 8003358:	4692      	mov	sl, r2
 800335a:	eb1b 0509 	adds.w	r5, fp, r9
 800335e:	eb4c 060a 	adc.w	r6, ip, sl
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	0094      	lsls	r4, r2, #2
 8003376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	461a      	mov	r2, r3
 800337e:	4623      	mov	r3, r4
 8003380:	4628      	mov	r0, r5
 8003382:	4631      	mov	r1, r6
 8003384:	f7fc ff24 	bl	80001d0 <__aeabi_uldivmod>
 8003388:	4603      	mov	r3, r0
 800338a:	460c      	mov	r4, r1
 800338c:	461a      	mov	r2, r3
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <UART_SetConfig+0x6f4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <UART_SetConfig+0x6f4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ae:	4498      	add	r8, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	469b      	mov	fp, r3
 80033b4:	f04f 0c00 	mov.w	ip, #0
 80033b8:	46d9      	mov	r9, fp
 80033ba:	46e2      	mov	sl, ip
 80033bc:	eb19 0309 	adds.w	r3, r9, r9
 80033c0:	eb4a 040a 	adc.w	r4, sl, sl
 80033c4:	4699      	mov	r9, r3
 80033c6:	46a2      	mov	sl, r4
 80033c8:	eb19 090b 	adds.w	r9, r9, fp
 80033cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033e4:	4689      	mov	r9, r1
 80033e6:	4692      	mov	sl, r2
 80033e8:	eb1b 0509 	adds.w	r5, fp, r9
 80033ec:	eb4c 060a 	adc.w	r6, ip, sl
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f04f 0400 	mov.w	r4, #0
 8003402:	0094      	lsls	r4, r2, #2
 8003404:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003408:	008b      	lsls	r3, r1, #2
 800340a:	461a      	mov	r2, r3
 800340c:	4623      	mov	r3, r4
 800340e:	4628      	mov	r0, r5
 8003410:	4631      	mov	r1, r6
 8003412:	f7fc fedd 	bl	80001d0 <__aeabi_uldivmod>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	461a      	mov	r2, r3
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <UART_SetConfig+0x6f4>)
 800341e:	fba3 1302 	umull	r1, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2164      	movs	r1, #100	; 0x64
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	3332      	adds	r3, #50	; 0x32
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <UART_SetConfig+0x6f4>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4442      	add	r2, r8
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	e7ff      	b.n	8003446 <UART_SetConfig+0x6e2>
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f

0800345c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003468:	f001 fac6 	bl	80049f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <pvPortMalloc+0x170>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003474:	f000 f90c 	bl	8003690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003478:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <pvPortMalloc+0x174>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 808c 	bne.w	800359e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01c      	beq.n	80034c6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800348c:	2208      	movs	r2, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	2b00      	cmp	r3, #0
 800349c:	d013      	beq.n	80034c6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	3308      	adds	r3, #8
 80034a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e7fe      	b.n	80034c4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d068      	beq.n	800359e <pvPortMalloc+0x142>
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <pvPortMalloc+0x178>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d863      	bhi.n	800359e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <pvPortMalloc+0x17c>)
 80034d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <pvPortMalloc+0x17c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034e0:	e004      	b.n	80034ec <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d903      	bls.n	80034fe <pvPortMalloc+0xa2>
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f1      	bne.n	80034e2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80034fe:	4b33      	ldr	r3, [pc, #204]	; (80035cc <pvPortMalloc+0x170>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	429a      	cmp	r2, r3
 8003506:	d04a      	beq.n	800359e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	4413      	add	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	2308      	movs	r3, #8
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	429a      	cmp	r2, r3
 8003528:	d91e      	bls.n	8003568 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <pvPortMalloc+0xf4>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e7fe      	b.n	800354e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1ad2      	subs	r2, r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003562:	69b8      	ldr	r0, [r7, #24]
 8003564:	f000 f8f6 	bl	8003754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <pvPortMalloc+0x178>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <pvPortMalloc+0x178>)
 8003574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <pvPortMalloc+0x178>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <pvPortMalloc+0x180>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d203      	bcs.n	800358a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <pvPortMalloc+0x178>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <pvPortMalloc+0x180>)
 8003588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <pvPortMalloc+0x174>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	431a      	orrs	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800359e:	f001 fa39 	bl	8004a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <pvPortMalloc+0x164>
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e7fe      	b.n	80035be <pvPortMalloc+0x162>
	return pvReturn;
 80035c0:	69fb      	ldr	r3, [r7, #28]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20012c38 	.word	0x20012c38
 80035d0:	20012c44 	.word	0x20012c44
 80035d4:	20012c3c 	.word	0x20012c3c
 80035d8:	20012c30 	.word	0x20012c30
 80035dc:	20012c40 	.word	0x20012c40

080035e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d046      	beq.n	8003680 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80035f2:	2308      	movs	r3, #8
 80035f4:	425b      	negs	r3, r3
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <vPortFree+0xa8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <vPortFree+0x42>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e7fe      	b.n	8003620 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <vPortFree+0x5e>
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e7fe      	b.n	800363c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <vPortFree+0xa8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d019      	beq.n	8003680 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <vPortFree+0xa8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	43db      	mvns	r3, r3
 800365e:	401a      	ands	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003664:	f001 f9c8 	bl	80049f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <vPortFree+0xac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4413      	add	r3, r2
 8003672:	4a06      	ldr	r2, [pc, #24]	; (800368c <vPortFree+0xac>)
 8003674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003676:	6938      	ldr	r0, [r7, #16]
 8003678:	f000 f86c 	bl	8003754 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800367c:	f001 f9ca 	bl	8004a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20012c44 	.word	0x20012c44
 800368c:	20012c3c 	.word	0x20012c3c

08003690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003696:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800369a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <prvHeapInit+0xac>)
 800369e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3307      	adds	r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0307 	bic.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a1f      	ldr	r2, [pc, #124]	; (800373c <prvHeapInit+0xac>)
 80036c0:	4413      	add	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <prvHeapInit+0xb0>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <prvHeapInit+0xb0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036dc:	2208      	movs	r2, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <prvHeapInit+0xb4>)
 80036f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <prvHeapInit+0xb4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <prvHeapInit+0xb4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	1ad2      	subs	r2, r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <prvHeapInit+0xb4>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <prvHeapInit+0xb8>)
 800371e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <prvHeapInit+0xbc>)
 8003726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <prvHeapInit+0xc0>)
 800372a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800372e:	601a      	str	r2, [r3, #0]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	20000030 	.word	0x20000030
 8003740:	20012c30 	.word	0x20012c30
 8003744:	20012c38 	.word	0x20012c38
 8003748:	20012c40 	.word	0x20012c40
 800374c:	20012c3c 	.word	0x20012c3c
 8003750:	20012c44 	.word	0x20012c44

08003754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <prvInsertBlockIntoFreeList+0xac>)
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e002      	b.n	8003768 <prvInsertBlockIntoFreeList+0x14>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d8f7      	bhi.n	8003762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d108      	bne.n	8003796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	441a      	add	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d118      	bne.n	80037dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <prvInsertBlockIntoFreeList+0xb0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d00d      	beq.n	80037d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e008      	b.n	80037e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <prvInsertBlockIntoFreeList+0xb0>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e003      	b.n	80037e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d002      	beq.n	80037f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20012c30 	.word	0x20012c30
 8003804:	20012c38 	.word	0x20012c38

08003808 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003820:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f103 0208 	add.w	r2, r3, #8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f103 0208 	add.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c0:	d103      	bne.n	80038ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e00c      	b.n	80038e4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3308      	adds	r3, #8
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e002      	b.n	80038d8 <vListInsert+0x2e>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d2f6      	bcs.n	80038d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6892      	ldr	r2, [r2, #8]
 8003932:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6852      	ldr	r2, [r2, #4]
 800393c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d103      	bne.n	8003950 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1e5a      	subs	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <xQueueGenericReset+0x28>
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	e7fe      	b.n	8003996 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8003998:	f002 fa48 	bl	8005e2c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	441a      	add	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	3b01      	subs	r3, #1
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	22ff      	movs	r2, #255	; 0xff
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d114      	bne.n	8003a18 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01a      	beq.n	8003a2c <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3310      	adds	r3, #16
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fa16 	bl	8004e2c <xTaskRemoveFromEventList>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <xQueueGenericReset+0xcc>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	e009      	b.n	8003a2c <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3310      	adds	r3, #16
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fef3 	bl	8003808 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff feee 	bl	8003808 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003a2c:	f002 fa2c 	bl	8005e88 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000ed04 	.word	0xe000ed04

08003a40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <xQueueGenericCreate+0x28>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e7fe      	b.n	8003a66 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <xQueueGenericCreate+0x46>
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericCreate+0x4a>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericCreate+0x4c>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <xQueueGenericCreate+0x64>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e7fe      	b.n	8003aa2 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003aaa:	d909      	bls.n	8003ac0 <xQueueGenericCreate+0x80>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	3350      	adds	r3, #80	; 0x50
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fcc9 	bl	800345c <pvPortMalloc>
 8003aca:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3350      	adds	r3, #80	; 0x50
 8003ada:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003adc:	79fa      	ldrb	r2, [r7, #7]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f805 	bl	8003af8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e002      	b.n	8003b1a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b26:	2101      	movs	r1, #1
 8003b28:	69b8      	ldr	r0, [r7, #24]
 8003b2a:	f7ff ff21 	bl	8003970 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <xQueueGenericSend+0x30>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	e7fe      	b.n	8003b6e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <xQueueGenericSend+0x3e>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <xQueueGenericSend+0x42>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <xQueueGenericSend+0x44>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <xQueueGenericSend+0x5c>
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e7fe      	b.n	8003b9a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d103      	bne.n	8003baa <xQueueGenericSend+0x6a>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <xQueueGenericSend+0x6e>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueGenericSend+0x70>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <xQueueGenericSend+0x88>
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	e7fe      	b.n	8003bc6 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc8:	f001 fac8 	bl	800515c <xTaskGetSchedulerState>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <xQueueGenericSend+0x98>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <xQueueGenericSend+0x9c>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <xQueueGenericSend+0x9e>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <xQueueGenericSend+0xb6>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bf6:	f002 f919 	bl	8005e2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <xQueueGenericSend+0xcc>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d129      	bne.n	8003c60 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c12:	f000 fbc7 	bl	80043a4 <prvCopyDataToQueue>
 8003c16:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f901 	bl	8004e2c <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <xQueueGenericSend+0x1f0>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	e00a      	b.n	8003c58 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <xQueueGenericSend+0x1f0>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c58:	f002 f916 	bl	8005e88 <vPortExitCritical>
                return pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e063      	b.n	8003d28 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c66:	f002 f90f 	bl	8005e88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e05c      	b.n	8003d28 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f939 	bl	8004ef0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c82:	f002 f901 	bl	8005e88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c86:	f000 feb7 	bl	80049f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c8a:	f002 f8cf 	bl	8005e2c <vPortEnterCritical>
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9a:	d103      	bne.n	8003ca4 <xQueueGenericSend+0x164>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb0:	d103      	bne.n	8003cba <xQueueGenericSend+0x17a>
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cba:	f002 f8e5 	bl	8005e88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f928 	bl	8004f1c <xTaskCheckForTimeOut>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d124      	bne.n	8003d1c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd4:	f000 fc5e 	bl	8004594 <prvIsQueueFull>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d018      	beq.n	8003d10 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f852 	bl	8004d90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cee:	f000 fbe9 	bl	80044c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f000 fe8f 	bl	8004a14 <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af7c 	bne.w	8003bf6 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <xQueueGenericSend+0x1f0>)
 8003d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	e772      	b.n	8003bf6 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d12:	f000 fbd7 	bl	80044c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d16:	f000 fe7d 	bl	8004a14 <xTaskResumeAll>
 8003d1a:	e76c      	b.n	8003bf6 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d1e:	f000 fbd1 	bl	80044c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d22:	f000 fe77 	bl	8004a14 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003d26:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3738      	adds	r7, #56	; 0x38
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b090      	sub	sp, #64	; 0x40
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <xQueueGenericSendFromISR+0x2c>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5e:	e7fe      	b.n	8003d5e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericSendFromISR+0x3a>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSendFromISR+0x3e>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSendFromISR+0x40>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <xQueueGenericSendFromISR+0x58>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	e7fe      	b.n	8003d8a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d103      	bne.n	8003d9a <xQueueGenericSendFromISR+0x66>
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <xQueueGenericSendFromISR+0x6a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <xQueueGenericSendFromISR+0x6c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <xQueueGenericSendFromISR+0x84>
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	e7fe      	b.n	8003db6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003db8:	f002 f914 	bl	8005fe4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003dbc:	f3ef 8211 	mrs	r2, BASEPRI
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61fa      	str	r2, [r7, #28]
 8003dd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <xQueueGenericSendFromISR+0xb6>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d13d      	bne.n	8003e66 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e00:	f000 fad0 	bl	80043a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003e04:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0c:	d112      	bne.n	8003e34 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d024      	beq.n	8003e60 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f806 	bl	8004e2c <xTaskRemoveFromEventList>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01c      	beq.n	8003e60 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d019      	beq.n	8003e60 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e015      	b.n	8003e60 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003e34:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e38:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3a:	d109      	bne.n	8003e50 <xQueueGenericSendFromISR+0x11c>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e7fe      	b.n	8003e4e <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e54:	3301      	adds	r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	b25a      	sxtb	r2, r3
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003e60:	2301      	movs	r3, #1
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003e64:	e001      	b.n	8003e6a <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3740      	adds	r7, #64	; 0x40
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08e      	sub	sp, #56	; 0x38
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d109      	bne.n	8003ea6 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <xQueueGiveFromISR+0x44>
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGiveFromISR+0x54>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGiveFromISR+0x58>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGiveFromISR+0x5a>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <xQueueGiveFromISR+0x72>
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e7fe      	b.n	8003eee <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ef0:	f002 f878 	bl	8005fe4 <vPortValidateInterruptPriority>
	__asm volatile
 8003ef4:	f3ef 8211 	mrs	r2, BASEPRI
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	617a      	str	r2, [r7, #20]
 8003f0a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003f0c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d239      	bcs.n	8003f94 <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3a:	d112      	bne.n	8003f62 <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d024      	beq.n	8003f8e <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3324      	adds	r3, #36	; 0x24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 ff6f 	bl	8004e2c <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01c      	beq.n	8003f8e <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d019      	beq.n	8003f8e <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e015      	b.n	8003f8e <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003f62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f66:	2b7f      	cmp	r3, #127	; 0x7f
 8003f68:	d109      	bne.n	8003f7e <xQueueGiveFromISR+0x100>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f82:	3301      	adds	r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	b25a      	sxtb	r2, r3
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e001      	b.n	8003f98 <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3738      	adds	r7, #56	; 0x38
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	; 0x30
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <xQueueReceive+0x2e>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <xQueueReceive+0x3c>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <xQueueReceive+0x40>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <xQueueReceive+0x42>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <xQueueReceive+0x5a>
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	e7fe      	b.n	8004004 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004006:	f001 f8a9 	bl	800515c <xTaskGetSchedulerState>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xQueueReceive+0x6a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueReceive+0x6e>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueReceive+0x70>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <xQueueReceive+0x88>
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e7fe      	b.n	8004032 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004034:	f001 fefa 	bl	8005e2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01f      	beq.n	8004084 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004048:	f000 fa16 	bl	8004478 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	3310      	adds	r3, #16
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fee3 	bl	8004e2c <xTaskRemoveFromEventList>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800406c:	4b3c      	ldr	r3, [pc, #240]	; (8004160 <xQueueReceive+0x1b4>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800407c:	f001 ff04 	bl	8005e88 <vPortExitCritical>
                return pdPASS;
 8004080:	2301      	movs	r3, #1
 8004082:	e069      	b.n	8004158 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800408a:	f001 fefd 	bl	8005e88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800408e:	2300      	movs	r3, #0
 8004090:	e062      	b.n	8004158 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	4618      	mov	r0, r3
 800409e:	f000 ff27 	bl	8004ef0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040a6:	f001 feef 	bl	8005e88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040aa:	f000 fca5 	bl	80049f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040ae:	f001 febd 	bl	8005e2c <vPortEnterCritical>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	d103      	bne.n	80040c8 <xQueueReceive+0x11c>
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d4:	d103      	bne.n	80040de <xQueueReceive+0x132>
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040de:	f001 fed3 	bl	8005e88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040e2:	1d3a      	adds	r2, r7, #4
 80040e4:	f107 0310 	add.w	r3, r7, #16
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff16 	bl	8004f1c <xTaskCheckForTimeOut>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d123      	bne.n	800413e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f8:	f000 fa36 	bl	8004568 <prvIsQueueEmpty>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d017      	beq.n	8004132 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe40 	bl	8004d90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004112:	f000 f9d7 	bl	80044c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004116:	f000 fc7d 	bl	8004a14 <xTaskResumeAll>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d189      	bne.n	8004034 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <xQueueReceive+0x1b4>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e780      	b.n	8004034 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004134:	f000 f9c6 	bl	80044c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004138:	f000 fc6c 	bl	8004a14 <xTaskResumeAll>
 800413c:	e77a      	b.n	8004034 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800413e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004140:	f000 f9c0 	bl	80044c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004144:	f000 fc66 	bl	8004a14 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414a:	f000 fa0d 	bl	8004568 <prvIsQueueEmpty>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	f43f af6f 	beq.w	8004034 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004156:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004158:	4618      	mov	r0, r3
 800415a:	3730      	adds	r7, #48	; 0x30
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <xQueueSemaphoreTake+0x30>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	e7fe      	b.n	8004192 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <xQueueSemaphoreTake+0x4c>
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e7fe      	b.n	80041ae <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041b0:	f000 ffd4 	bl	800515c <xTaskGetSchedulerState>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <xQueueSemaphoreTake+0x5c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueSemaphoreTake+0x60>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueSemaphoreTake+0x62>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <xQueueSemaphoreTake+0x7a>
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e7fe      	b.n	80041dc <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80041de:	f001 fe25 	bl	8005e2c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d024      	beq.n	8004238 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80041fe:	f001 f967 	bl	80054d0 <pvTaskIncrementMutexHeldCount>
 8004202:	4602      	mov	r2, r0
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	3310      	adds	r3, #16
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fe09 	bl	8004e2c <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b53      	ldr	r3, [pc, #332]	; (8004370 <xQueueSemaphoreTake+0x20c>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004230:	f001 fe2a 	bl	8005e88 <vPortExitCritical>
                return pdPASS;
 8004234:	2301      	movs	r3, #1
 8004236:	e096      	b.n	8004366 <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d110      	bne.n	8004260 <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <xQueueSemaphoreTake+0xf4>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e7fe      	b.n	8004256 <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004258:	f001 fe16 	bl	8005e88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800425c:	2300      	movs	r3, #0
 800425e:	e082      	b.n	8004366 <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe40 	bl	8004ef0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004274:	f001 fe08 	bl	8005e88 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004278:	f000 fbbe 	bl	80049f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800427c:	f001 fdd6 	bl	8005e2c <vPortEnterCritical>
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004286:	b25b      	sxtb	r3, r3
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428c:	d103      	bne.n	8004296 <xQueueSemaphoreTake+0x132>
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800429c:	b25b      	sxtb	r3, r3
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a2:	d103      	bne.n	80042ac <xQueueSemaphoreTake+0x148>
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ac:	f001 fdec 	bl	8005e88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b0:	463a      	mov	r2, r7
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fe2f 	bl	8004f1c <xTaskCheckForTimeOut>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d132      	bne.n	800432a <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042c6:	f000 f94f 	bl	8004568 <prvIsQueueEmpty>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d026      	beq.n	800431e <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 80042d8:	f001 fda8 	bl	8005e2c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 ff59 	bl	8005198 <xTaskPriorityInherit>
 80042e6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80042e8:	f001 fdce 	bl	8005e88 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	3324      	adds	r3, #36	; 0x24
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd4b 	bl	8004d90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80042fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042fc:	f000 f8e2 	bl	80044c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004300:	f000 fb88 	bl	8004a14 <xTaskResumeAll>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f47f af69 	bne.w	80041de <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <xQueueSemaphoreTake+0x20c>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	e75f      	b.n	80041de <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800431e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004320:	f000 f8d0 	bl	80044c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004324:	f000 fb76 	bl	8004a14 <xTaskResumeAll>
 8004328:	e759      	b.n	80041de <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800432a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800432c:	f000 f8ca 	bl	80044c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004330:	f000 fb70 	bl	8004a14 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004336:	f000 f917 	bl	8004568 <prvIsQueueEmpty>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f43f af4e 	beq.w	80041de <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 8004348:	f001 fd70 	bl	8005e2c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800434c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800434e:	f000 f811 	bl	8004374 <prvGetDisinheritPriorityAfterTimeout>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f820 	bl	80053a0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004360:	f001 fd92 	bl	8005e88 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004364:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004366:	4618      	mov	r0, r3
 8004368:	3738      	adds	r7, #56	; 0x38
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1c3 0305 	rsb	r3, r3, #5
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004396:	68fb      	ldr	r3, [r7, #12]
    }
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10d      	bne.n	80043de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d14d      	bne.n	8004466 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 ff62 	bl	8005298 <xTaskPriorityDisinherit>
 80043d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e043      	b.n	8004466 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d119      	bne.n	8004418 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6858      	ldr	r0, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	461a      	mov	r2, r3
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	f001 fe5a 	bl	80060a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	441a      	add	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d32b      	bcc.n	8004466 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e026      	b.n	8004466 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68d8      	ldr	r0, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	f001 fe40 	bl	80060a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	425b      	negs	r3, r3
 8004432:	441a      	add	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d207      	bcs.n	8004454 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	425b      	negs	r3, r3
 800444e:	441a      	add	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d105      	bne.n	8004466 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	3b01      	subs	r3, #1
 8004464:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800446e:	697b      	ldr	r3, [r7, #20]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d018      	beq.n	80044bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	441a      	add	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d303      	bcc.n	80044ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68d9      	ldr	r1, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	461a      	mov	r2, r3
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	f001 fdf6 	bl	80060a8 <memcpy>
    }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80044cc:	f001 fcae 	bl	8005e2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d8:	e011      	b.n	80044fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3324      	adds	r3, #36	; 0x24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fca0 	bl	8004e2c <xTaskRemoveFromEventList>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80044f2:	f000 fd73 	bl	8004fdc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	dce9      	bgt.n	80044da <prvUnlockQueue+0x16>
 8004506:	e000      	b.n	800450a <prvUnlockQueue+0x46>
                        break;
 8004508:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004512:	f001 fcb9 	bl	8005e88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004516:	f001 fc89 	bl	8005e2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004520:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004522:	e011      	b.n	8004548 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3310      	adds	r3, #16
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fc7b 	bl	8004e2c <xTaskRemoveFromEventList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800453c:	f000 fd4e 	bl	8004fdc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004540:	7bbb      	ldrb	r3, [r7, #14]
 8004542:	3b01      	subs	r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800454c:	2b00      	cmp	r3, #0
 800454e:	dce9      	bgt.n	8004524 <prvUnlockQueue+0x60>
 8004550:	e000      	b.n	8004554 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004552:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	22ff      	movs	r2, #255	; 0xff
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800455c:	f001 fc94 	bl	8005e88 <vPortExitCritical>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004570:	f001 fc5c 	bl	8005e2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e001      	b.n	8004586 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004586:	f001 fc7f 	bl	8005e88 <vPortExitCritical>

    return xReturn;
 800458a:	68fb      	ldr	r3, [r7, #12]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800459c:	f001 fc46 	bl	8005e2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d102      	bne.n	80045b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e001      	b.n	80045b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80045b6:	f001 fc67 	bl	8005e88 <vPortExitCritical>

    return xReturn;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e014      	b.n	80045fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045d4:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <vQueueAddToRegistry+0x4c>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045e0:	490b      	ldr	r1, [pc, #44]	; (8004610 <vQueueAddToRegistry+0x4c>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <vQueueAddToRegistry+0x4c>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80045f6:	e005      	b.n	8004604 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b07      	cmp	r3, #7
 8004602:	d9e7      	bls.n	80045d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20012e70 	.word	0x20012e70

08004614 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004624:	f001 fc02 	bl	8005e2c <vPortEnterCritical>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004634:	d103      	bne.n	800463e <vQueueWaitForMessageRestricted+0x2a>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464a:	d103      	bne.n	8004654 <vQueueWaitForMessageRestricted+0x40>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004654:	f001 fc18 	bl	8005e88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	3324      	adds	r3, #36	; 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fbb5 	bl	8004dd8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff28 	bl	80044c4 <prvUnlockQueue>
    }
 8004674:	bf00      	nop
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	; 0x30
 8004680:	af04      	add	r7, sp, #16
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fee3 	bl	800345c <pvPortMalloc>
 8004696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800469e:	2058      	movs	r0, #88	; 0x58
 80046a0:	f7fe fedc 	bl	800345c <pvPortMalloc>
 80046a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
 80046b2:	e005      	b.n	80046c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046b4:	6978      	ldr	r0, [r7, #20]
 80046b6:	f7fe ff93 	bl	80035e0 <vPortFree>
 80046ba:	e001      	b.n	80046c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	2300      	movs	r3, #0
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f80e 	bl	80046fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046e2:	69f8      	ldr	r0, [r7, #28]
 80046e4:	f000 f89a 	bl	800481c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046e8:	2301      	movs	r3, #1
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e002      	b.n	80046f4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046f4:	69bb      	ldr	r3, [r7, #24]
	}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b088      	sub	sp, #32
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	461a      	mov	r2, r3
 8004716:	21a5      	movs	r1, #165	; 0xa5
 8004718:	f001 fcd1 	bl	80060be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004726:	3b01      	subs	r3, #1
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f023 0307 	bic.w	r3, r3, #7
 8004734:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <prvInitialiseNewTask+0x56>
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e7fe      	b.n	8004752 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01f      	beq.n	800479a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e012      	b.n	8004786 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	7819      	ldrb	r1, [r3, #0]
 8004768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	3334      	adds	r3, #52	; 0x34
 8004770:	460a      	mov	r2, r1
 8004772:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b09      	cmp	r3, #9
 800478a:	d9e9      	bls.n	8004760 <prvInitialiseNewTask+0x62>
 800478c:	e000      	b.n	8004790 <prvInitialiseNewTask+0x92>
			{
				break;
 800478e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004798:	e003      	b.n	80047a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d901      	bls.n	80047ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047a8:	2304      	movs	r3, #4
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b6:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f840 	bl	8003848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	3318      	adds	r3, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f83b 	bl	8003848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	f1c3 0205 	rsb	r2, r3, #5
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	2200      	movs	r2, #0
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	69b8      	ldr	r0, [r7, #24]
 80047fc:	f001 f9f0 	bl	8005be0 <pxPortInitialiseStack>
 8004800:	4602      	mov	r2, r0
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004812:	bf00      	nop
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004824:	f001 fb02 	bl	8005e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <prvAddNewTaskToReadyList+0xc0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <prvAddNewTaskToReadyList+0xc0>)
 8004830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004832:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800483a:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <prvAddNewTaskToReadyList+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d110      	bne.n	800486a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004848:	f000 fbec 	bl	8005024 <prvInitialiseTaskLists>
 800484c:	e00d      	b.n	800486a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800484e:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004856:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d802      	bhi.n	800486a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <prvAddNewTaskToReadyList+0xcc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <prvAddNewTaskToReadyList+0xcc>)
 8004872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <prvAddNewTaskToReadyList+0xcc>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <prvAddNewTaskToReadyList+0xd0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <prvAddNewTaskToReadyList+0xd0>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <prvAddNewTaskToReadyList+0xd4>)
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7fe ffdc 	bl	8003862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048aa:	f001 faed 	bl	8005e88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <prvAddNewTaskToReadyList+0xc8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvAddNewTaskToReadyList+0xc4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d207      	bcs.n	80048d4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <prvAddNewTaskToReadyList+0xd8>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20012d20 	.word	0x20012d20
 80048e0:	20012c48 	.word	0x20012c48
 80048e4:	20012d2c 	.word	0x20012d2c
 80048e8:	20012d3c 	.word	0x20012d3c
 80048ec:	20012d28 	.word	0x20012d28
 80048f0:	20012c4c 	.word	0x20012c4c
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <vTaskDelay+0x60>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <vTaskDelay+0x2e>
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	e7fe      	b.n	8004924 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004926:	f000 f867 	bl	80049f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800492a:	2100      	movs	r1, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fde3 	bl	80054f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004932:	f000 f86f 	bl	8004a14 <xTaskResumeAll>
 8004936:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <vTaskDelay+0x64>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20012d48 	.word	0x20012d48
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004966:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <vTaskStartScheduler+0x80>)
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2300      	movs	r3, #0
 8004970:	2282      	movs	r2, #130	; 0x82
 8004972:	491c      	ldr	r1, [pc, #112]	; (80049e4 <vTaskStartScheduler+0x84>)
 8004974:	481c      	ldr	r0, [pc, #112]	; (80049e8 <vTaskStartScheduler+0x88>)
 8004976:	f7ff fe81 	bl	800467c <xTaskCreate>
 800497a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004982:	f000 fe1f 	bl	80055c4 <xTimerCreateTimerTask>
 8004986:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d115      	bne.n	80049ba <vTaskStartScheduler+0x5a>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <vTaskStartScheduler+0x8c>)
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <vTaskStartScheduler+0x90>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <vTaskStartScheduler+0x94>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049b4:	f001 f99c 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049b8:	e00d      	b.n	80049d6 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c0:	d109      	bne.n	80049d6 <vTaskStartScheduler+0x76>
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	e7fe      	b.n	80049d4 <vTaskStartScheduler+0x74>
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20012d44 	.word	0x20012d44
 80049e4:	080060f8 	.word	0x080060f8
 80049e8:	08004ff5 	.word	0x08004ff5
 80049ec:	20012d40 	.word	0x20012d40
 80049f0:	20012d2c 	.word	0x20012d2c
 80049f4:	20012d24 	.word	0x20012d24

080049f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <vTaskSuspendAll+0x18>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <vTaskSuspendAll+0x18>)
 8004a04:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	20012d48 	.word	0x20012d48

08004a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <xTaskResumeAll+0x114>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <xTaskResumeAll+0x2a>
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	e7fe      	b.n	8004a3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a3e:	f001 f9f5 	bl	8005e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a42:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <xTaskResumeAll+0x114>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	4a37      	ldr	r2, [pc, #220]	; (8004b28 <xTaskResumeAll+0x114>)
 8004a4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a4c:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <xTaskResumeAll+0x114>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d161      	bne.n	8004b18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a54:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <xTaskResumeAll+0x118>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05d      	beq.n	8004b18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a5c:	e02e      	b.n	8004abc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <xTaskResumeAll+0x11c>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe ff56 	bl	800391c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe ff51 	bl	800391c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <xTaskResumeAll+0x120>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <xTaskResumeAll+0x120>)
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <xTaskResumeAll+0x124>)
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fedd 	bl	8003862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4b23      	ldr	r3, [pc, #140]	; (8004b3c <xTaskResumeAll+0x128>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <xTaskResumeAll+0x12c>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <xTaskResumeAll+0x11c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1cc      	bne.n	8004a5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004aca:	f000 fb27 	bl	800511c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <xTaskResumeAll+0x130>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ada:	f000 f847 	bl	8004b6c <xTaskIncrementTick>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <xTaskResumeAll+0x12c>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f1      	bne.n	8004ada <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <xTaskResumeAll+0x130>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <xTaskResumeAll+0x12c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <xTaskResumeAll+0x134>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b18:	f001 f9b6 	bl	8005e88 <vPortExitCritical>

	return xAlreadyYielded;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20012d48 	.word	0x20012d48
 8004b2c:	20012d20 	.word	0x20012d20
 8004b30:	20012ce0 	.word	0x20012ce0
 8004b34:	20012d28 	.word	0x20012d28
 8004b38:	20012c4c 	.word	0x20012c4c
 8004b3c:	20012c48 	.word	0x20012c48
 8004b40:	20012d34 	.word	0x20012d34
 8004b44:	20012d30 	.word	0x20012d30
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <xTaskGetTickCount+0x1c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20012d24 	.word	0x20012d24

08004b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b4e      	ldr	r3, [pc, #312]	; (8004cb0 <xTaskIncrementTick+0x144>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 8087 	bne.w	8004c8e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <xTaskIncrementTick+0x148>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b88:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <xTaskIncrementTick+0x148>)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11f      	bne.n	8004bd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b94:	4b48      	ldr	r3, [pc, #288]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <xTaskIncrementTick+0x46>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	e7fe      	b.n	8004bb0 <xTaskIncrementTick+0x44>
 8004bb2:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a3e      	ldr	r2, [pc, #248]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <xTaskIncrementTick+0x150>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <xTaskIncrementTick+0x154>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	f000 faa4 	bl	800511c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d348      	bcc.n	8004c70 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bee:	601a      	str	r2, [r3, #0]
					break;
 8004bf0:	e03e      	b.n	8004c70 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf2:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <xTaskIncrementTick+0x14c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d203      	bcs.n	8004c12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c0a:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <xTaskIncrementTick+0x158>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c10:	e02e      	b.n	8004c70 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fe80 	bl	800391c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe fe77 	bl	800391c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	2201      	movs	r2, #1
 8004c34:	409a      	lsls	r2, r3
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <xTaskIncrementTick+0x15c>)
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004c4e:	441a      	add	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fe fe03 	bl	8003862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3b9      	bcc.n	8004bde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6e:	e7b6      	b.n	8004bde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <xTaskIncrementTick+0x164>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4915      	ldr	r1, [pc, #84]	; (8004ccc <xTaskIncrementTick+0x160>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d907      	bls.n	8004c98 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e004      	b.n	8004c98 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <xTaskIncrementTick+0x168>)
 8004c96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <xTaskIncrementTick+0x16c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ca4:	697b      	ldr	r3, [r7, #20]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20012d48 	.word	0x20012d48
 8004cb4:	20012d24 	.word	0x20012d24
 8004cb8:	20012cd8 	.word	0x20012cd8
 8004cbc:	20012cdc 	.word	0x20012cdc
 8004cc0:	20012d38 	.word	0x20012d38
 8004cc4:	20012d40 	.word	0x20012d40
 8004cc8:	20012d28 	.word	0x20012d28
 8004ccc:	20012c4c 	.word	0x20012c4c
 8004cd0:	20012c48 	.word	0x20012c48
 8004cd4:	20012d30 	.word	0x20012d30
 8004cd8:	20012d34 	.word	0x20012d34

08004cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <vTaskSwitchContext+0xa0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cea:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <vTaskSwitchContext+0xa4>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cf0:	e03e      	b.n	8004d70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <vTaskSwitchContext+0xa4>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <vTaskSwitchContext+0xa8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	f1c3 031f 	rsb	r3, r3, #31
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	491e      	ldr	r1, [pc, #120]	; (8004d88 <vTaskSwitchContext+0xac>)
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e7fe      	b.n	8004d34 <vTaskSwitchContext+0x58>
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <vTaskSwitchContext+0xac>)
 8004d42:	4413      	add	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	3308      	adds	r3, #8
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d104      	bne.n	8004d66 <vTaskSwitchContext+0x8a>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <vTaskSwitchContext+0xb0>)
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	20012d48 	.word	0x20012d48
 8004d80:	20012d34 	.word	0x20012d34
 8004d84:	20012d28 	.word	0x20012d28
 8004d88:	20012c4c 	.word	0x20012c4c
 8004d8c:	20012c48 	.word	0x20012c48

08004d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <vTaskPlaceOnEventList+0x24>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e7fe      	b.n	8004db2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <vTaskPlaceOnEventList+0x44>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3318      	adds	r3, #24
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fe fd74 	bl	80038aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f000 fb97 	bl	80054f8 <prvAddCurrentTaskToDelayedList>
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20012c48 	.word	0x20012c48

08004dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <vTaskPlaceOnEventListRestricted+0x26>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e7fe      	b.n	8004dfc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3318      	adds	r3, #24
 8004e04:	4619      	mov	r1, r3
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fe fd2b 	bl	8003862 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	68b8      	ldr	r0, [r7, #8]
 8004e1c:	f000 fb6c 	bl	80054f8 <prvAddCurrentTaskToDelayedList>
	}
 8004e20:	bf00      	nop
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20012c48 	.word	0x20012c48

08004e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <xTaskRemoveFromEventList+0x2a>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e7fe      	b.n	8004e54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3318      	adds	r3, #24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fd5e 	bl	800391c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <xTaskRemoveFromEventList+0xac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11c      	bne.n	8004ea2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fd55 	bl	800391c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	2201      	movs	r2, #1
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <xTaskRemoveFromEventList+0xb0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	4a16      	ldr	r2, [pc, #88]	; (8004edc <xTaskRemoveFromEventList+0xb0>)
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <xTaskRemoveFromEventList+0xb4>)
 8004e92:	441a      	add	r2, r3
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f7fe fce1 	bl	8003862 <vListInsertEnd>
 8004ea0:	e005      	b.n	8004eae <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	480e      	ldr	r0, [pc, #56]	; (8004ee4 <xTaskRemoveFromEventList+0xb8>)
 8004eaa:	f7fe fcda 	bl	8003862 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <xTaskRemoveFromEventList+0xbc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d905      	bls.n	8004ec8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <xTaskRemoveFromEventList+0xc0>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e001      	b.n	8004ecc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ecc:	697b      	ldr	r3, [r7, #20]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20012d48 	.word	0x20012d48
 8004edc:	20012d28 	.word	0x20012d28
 8004ee0:	20012c4c 	.word	0x20012c4c
 8004ee4:	20012ce0 	.word	0x20012ce0
 8004ee8:	20012c48 	.word	0x20012c48
 8004eec:	20012d34 	.word	0x20012d34

08004ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <vTaskInternalSetTimeOutState+0x24>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <vTaskInternalSetTimeOutState+0x28>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20012d38 	.word	0x20012d38
 8004f18:	20012d24 	.word	0x20012d24

08004f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <xTaskCheckForTimeOut+0x24>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e7fe      	b.n	8004f3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <xTaskCheckForTimeOut+0x3e>
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e7fe      	b.n	8004f58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f5a:	f000 ff67 	bl	8005e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <xTaskCheckForTimeOut+0xb8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f76:	d102      	bne.n	8004f7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e023      	b.n	8004fc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <xTaskCheckForTimeOut+0xbc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d007      	beq.n	8004f9a <xTaskCheckForTimeOut+0x7e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e015      	b.n	8004fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d20b      	bcs.n	8004fbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff9d 	bl	8004ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e004      	b.n	8004fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fc6:	f000 ff5f 	bl	8005e88 <vPortExitCritical>

	return xReturn;
 8004fca:	69fb      	ldr	r3, [r7, #28]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20012d24 	.word	0x20012d24
 8004fd8:	20012d38 	.word	0x20012d38

08004fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <vTaskMissedYield+0x14>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20012d34 	.word	0x20012d34

08004ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ffc:	f000 f852 	bl	80050a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <prvIdleTask+0x28>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d9f9      	bls.n	8004ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <prvIdleTask+0x2c>)
 800500a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005018:	e7f0      	b.n	8004ffc <prvIdleTask+0x8>
 800501a:	bf00      	nop
 800501c:	20012c4c 	.word	0x20012c4c
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	e00c      	b.n	800504a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a12      	ldr	r2, [pc, #72]	; (8005084 <prvInitialiseTaskLists+0x60>)
 800503c:	4413      	add	r3, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fbe2 	bl	8003808 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3301      	adds	r3, #1
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d9ef      	bls.n	8005030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005050:	480d      	ldr	r0, [pc, #52]	; (8005088 <prvInitialiseTaskLists+0x64>)
 8005052:	f7fe fbd9 	bl	8003808 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005056:	480d      	ldr	r0, [pc, #52]	; (800508c <prvInitialiseTaskLists+0x68>)
 8005058:	f7fe fbd6 	bl	8003808 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800505c:	480c      	ldr	r0, [pc, #48]	; (8005090 <prvInitialiseTaskLists+0x6c>)
 800505e:	f7fe fbd3 	bl	8003808 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005062:	480c      	ldr	r0, [pc, #48]	; (8005094 <prvInitialiseTaskLists+0x70>)
 8005064:	f7fe fbd0 	bl	8003808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005068:	480b      	ldr	r0, [pc, #44]	; (8005098 <prvInitialiseTaskLists+0x74>)
 800506a:	f7fe fbcd 	bl	8003808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <prvInitialiseTaskLists+0x78>)
 8005070:	4a05      	ldr	r2, [pc, #20]	; (8005088 <prvInitialiseTaskLists+0x64>)
 8005072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <prvInitialiseTaskLists+0x7c>)
 8005076:	4a05      	ldr	r2, [pc, #20]	; (800508c <prvInitialiseTaskLists+0x68>)
 8005078:	601a      	str	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20012c4c 	.word	0x20012c4c
 8005088:	20012cb0 	.word	0x20012cb0
 800508c:	20012cc4 	.word	0x20012cc4
 8005090:	20012ce0 	.word	0x20012ce0
 8005094:	20012cf4 	.word	0x20012cf4
 8005098:	20012d0c 	.word	0x20012d0c
 800509c:	20012cd8 	.word	0x20012cd8
 80050a0:	20012cdc 	.word	0x20012cdc

080050a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050aa:	e019      	b.n	80050e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050ac:	f000 febe 	bl	8005e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <prvCheckTasksWaitingTermination+0x4c>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe fc2d 	bl	800391c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <prvCheckTasksWaitingTermination+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <prvCheckTasksWaitingTermination+0x50>)
 80050ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <prvCheckTasksWaitingTermination+0x54>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <prvCheckTasksWaitingTermination+0x54>)
 80050d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050d6:	f000 fed7 	bl	8005e88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f80e 	bl	80050fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <prvCheckTasksWaitingTermination+0x54>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e1      	bne.n	80050ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20012cf4 	.word	0x20012cf4
 80050f4:	20012d20 	.word	0x20012d20
 80050f8:	20012d08 	.word	0x20012d08

080050fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fa69 	bl	80035e0 <vPortFree>
			vPortFree( pxTCB );
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fe fa66 	bl	80035e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <prvResetNextTaskUnblockTime+0x38>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvResetNextTaskUnblockTime+0x3c>)
 800512e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005134:	e008      	b.n	8005148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <prvResetNextTaskUnblockTime+0x38>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvResetNextTaskUnblockTime+0x3c>)
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	20012cd8 	.word	0x20012cd8
 8005158:	20012d40 	.word	0x20012d40

0800515c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <xTaskGetSchedulerState+0x34>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800516a:	2301      	movs	r3, #1
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	e008      	b.n	8005182 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <xTaskGetSchedulerState+0x38>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005178:	2302      	movs	r3, #2
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e001      	b.n	8005182 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005182:	687b      	ldr	r3, [r7, #4]
	}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20012d2c 	.word	0x20012d2c
 8005194:	20012d48 	.word	0x20012d48

08005198 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d069      	beq.n	8005282 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <xTaskPriorityInherit+0xf4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d259      	bcs.n	8005270 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db06      	blt.n	80051d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c4:	4b31      	ldr	r3, [pc, #196]	; (800528c <xTaskPriorityInherit+0xf4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	f1c3 0205 	rsb	r2, r3, #5
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6959      	ldr	r1, [r3, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <xTaskPriorityInherit+0xf8>)
 80051e4:	4413      	add	r3, r2
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d13a      	bne.n	8005260 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fb94 	bl	800391c <uxListRemove>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d115      	bne.n	8005226 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fe:	4924      	ldr	r1, [pc, #144]	; (8005290 <xTaskPriorityInherit+0xf8>)
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskPriorityInherit+0x8e>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2201      	movs	r2, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43da      	mvns	r2, r3
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <xTaskPriorityInherit+0xfc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4013      	ands	r3, r2
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <xTaskPriorityInherit+0xfc>)
 8005224:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005226:	4b19      	ldr	r3, [pc, #100]	; (800528c <xTaskPriorityInherit+0xf4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	2201      	movs	r2, #1
 8005236:	409a      	lsls	r2, r3
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <xTaskPriorityInherit+0xfc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <xTaskPriorityInherit+0xfc>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a10      	ldr	r2, [pc, #64]	; (8005290 <xTaskPriorityInherit+0xf8>)
 8005250:	441a      	add	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe fb02 	bl	8003862 <vListInsertEnd>
 800525e:	e004      	b.n	800526a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <xTaskPriorityInherit+0xf4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e008      	b.n	8005282 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <xTaskPriorityInherit+0xf4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	429a      	cmp	r2, r3
 800527c:	d201      	bcs.n	8005282 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005282:	68fb      	ldr	r3, [r7, #12]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20012c48 	.word	0x20012c48
 8005290:	20012c4c 	.word	0x20012c4c
 8005294:	20012d28 	.word	0x20012d28

08005298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d06c      	beq.n	8005388 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ae:	4b39      	ldr	r3, [pc, #228]	; (8005394 <xTaskPriorityDisinherit+0xfc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d009      	beq.n	80052cc <xTaskPriorityDisinherit+0x34>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e7fe      	b.n	80052ca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <xTaskPriorityDisinherit+0x50>
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	e7fe      	b.n	80052e6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d044      	beq.n	8005388 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005302:	2b00      	cmp	r3, #0
 8005304:	d140      	bne.n	8005388 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3304      	adds	r3, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fb06 	bl	800391c <uxListRemove>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d115      	bne.n	8005342 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	491f      	ldr	r1, [pc, #124]	; (8005398 <xTaskPriorityDisinherit+0x100>)
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xTaskPriorityDisinherit+0xaa>
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	2201      	movs	r2, #1
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43da      	mvns	r2, r3
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <xTaskPriorityDisinherit+0x104>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4013      	ands	r3, r2
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <xTaskPriorityDisinherit+0x104>)
 8005340:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	f1c3 0205 	rsb	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	2201      	movs	r2, #1
 800535c:	409a      	lsls	r2, r3
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <xTaskPriorityDisinherit+0x104>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	4a0d      	ldr	r2, [pc, #52]	; (800539c <xTaskPriorityDisinherit+0x104>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <xTaskPriorityDisinherit+0x100>)
 8005376:	441a      	add	r2, r3
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7fe fa6f 	bl	8003862 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005388:	697b      	ldr	r3, [r7, #20]
	}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20012c48 	.word	0x20012c48
 8005398:	20012c4c 	.word	0x20012c4c
 800539c:	20012d28 	.word	0x20012d28

080053a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8081 	beq.w	80054bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e7fe      	b.n	80053d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d902      	bls.n	80053e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e002      	b.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d062      	beq.n	80054bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d15d      	bne.n	80054bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005400:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	429a      	cmp	r2, r3
 8005408:	d109      	bne.n	800541e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	e7fe      	b.n	800541c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	db04      	blt.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f1c3 0205 	rsb	r2, r3, #5
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6959      	ldr	r1, [r3, #20]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800544c:	4413      	add	r3, r2
 800544e:	4299      	cmp	r1, r3
 8005450:	d134      	bne.n	80054bc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fa60 	bl	800391c <uxListRemove>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d115      	bne.n	800548e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005466:	4918      	ldr	r1, [pc, #96]	; (80054c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2201      	movs	r2, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43da      	mvns	r2, r3
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4013      	ands	r3, r2
 800548a:	4a10      	ldr	r2, [pc, #64]	; (80054cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800548c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	2201      	movs	r2, #1
 8005494:	409a      	lsls	r2, r3
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	4a0b      	ldr	r2, [pc, #44]	; (80054cc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4a06      	ldr	r2, [pc, #24]	; (80054c8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80054ae:	441a      	add	r2, r3
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7fe f9d3 	bl	8003862 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054bc:	bf00      	nop
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20012c48 	.word	0x20012c48
 80054c8:	20012c4c 	.word	0x20012c4c
 80054cc:	20012d28 	.word	0x20012d28

080054d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054e2:	3201      	adds	r2, #1
 80054e4:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80054e6:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80054e8:	681b      	ldr	r3, [r3, #0]
	}
 80054ea:	4618      	mov	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20012c48 	.word	0x20012c48

080054f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005508:	4b28      	ldr	r3, [pc, #160]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fa04 	bl	800391c <uxListRemove>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800551a:	4b24      	ldr	r3, [pc, #144]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	2201      	movs	r2, #1
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4013      	ands	r3, r2
 800552e:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005538:	d10a      	bne.n	8005550 <prvAddCurrentTaskToDelayedList+0x58>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	481a      	ldr	r0, [pc, #104]	; (80055b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800554a:	f7fe f98a 	bl	8003862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800554e:	e026      	b.n	800559e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d209      	bcs.n	800557c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fe f998 	bl	80038aa <vListInsert>
}
 800557a:	e010      	b.n	800559e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fe f98e 	bl	80038aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d202      	bcs.n	800559e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20012d24 	.word	0x20012d24
 80055ac:	20012c48 	.word	0x20012c48
 80055b0:	20012d28 	.word	0x20012d28
 80055b4:	20012d0c 	.word	0x20012d0c
 80055b8:	20012cdc 	.word	0x20012cdc
 80055bc:	20012cd8 	.word	0x20012cd8
 80055c0:	20012d40 	.word	0x20012d40

080055c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80055ce:	f000 fad1 	bl	8005b74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <xTimerCreateTimerTask+0x54>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <xTimerCreateTimerTask+0x58>)
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2302      	movs	r3, #2
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055e8:	490d      	ldr	r1, [pc, #52]	; (8005620 <xTimerCreateTimerTask+0x5c>)
 80055ea:	480e      	ldr	r0, [pc, #56]	; (8005624 <xTimerCreateTimerTask+0x60>)
 80055ec:	f7ff f846 	bl	800467c <xTaskCreate>
 80055f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <xTimerCreateTimerTask+0x48>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	e7fe      	b.n	800560a <xTimerCreateTimerTask+0x46>
        return xReturn;
 800560c:	687b      	ldr	r3, [r7, #4]
    }
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20012d7c 	.word	0x20012d7c
 800561c:	20012d80 	.word	0x20012d80
 8005620:	08006100 	.word	0x08006100
 8005624:	08005759 	.word	0x08005759

08005628 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <xTimerGenericCommand+0x2c>
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	e7fe      	b.n	8005652 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <xTimerGenericCommand+0x94>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d02a      	beq.n	80056b2 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	dc18      	bgt.n	80056a0 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800566e:	f7ff fd75 	bl	800515c <xTaskGetSchedulerState>
 8005672:	4603      	mov	r3, r0
 8005674:	2b02      	cmp	r3, #2
 8005676:	d109      	bne.n	800568c <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <xTimerGenericCommand+0x94>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	f107 0114 	add.w	r1, r7, #20
 8005680:	2300      	movs	r3, #0
 8005682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005684:	f7fe fa5c 	bl	8003b40 <xQueueGenericSend>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24
 800568a:	e012      	b.n	80056b2 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <xTimerGenericCommand+0x94>)
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	f107 0114 	add.w	r1, r7, #20
 8005694:	2300      	movs	r3, #0
 8005696:	2200      	movs	r2, #0
 8005698:	f7fe fa52 	bl	8003b40 <xQueueGenericSend>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24
 800569e:	e008      	b.n	80056b2 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <xTimerGenericCommand+0x94>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	f107 0114 	add.w	r1, r7, #20
 80056a8:	2300      	movs	r3, #0
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	f7fe fb42 	bl	8003d34 <xQueueGenericSendFromISR>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20012d7c 	.word	0x20012d7c

080056c0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	4b22      	ldr	r3, [pc, #136]	; (8005754 <prvProcessExpiredTimer+0x94>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe f91f 	bl	800391c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d021      	beq.n	8005730 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	18d1      	adds	r1, r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	6978      	ldr	r0, [r7, #20]
 80056fa:	f000 f8d1 	bl	80058a0 <prvInsertTimerInActiveList>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01e      	beq.n	8005742 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005704:	2300      	movs	r3, #0
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	2100      	movs	r1, #0
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f7ff ff8a 	bl	8005628 <xTimerGenericCommand>
 8005714:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d112      	bne.n	8005742 <prvProcessExpiredTimer+0x82>
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e7fe      	b.n	800572e <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	6978      	ldr	r0, [r7, #20]
 8005748:	4798      	blx	r3
    }
 800574a:	bf00      	nop
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20012d74 	.word	0x20012d74

08005758 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f857 	bl	8005818 <prvGetNextExpireTime>
 800576a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4619      	mov	r1, r3
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f803 	bl	800577c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005776:	f000 f8d5 	bl	8005924 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800577a:	e7f1      	b.n	8005760 <prvTimerTask+0x8>

0800577c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005786:	f7ff f937 	bl	80049f8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f866 	bl	8005860 <prvSampleTimeNow>
 8005794:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d130      	bne.n	80057fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <prvProcessTimerOrBlockTask+0x3c>
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d806      	bhi.n	80057b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80057aa:	f7ff f933 	bl	8004a14 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ff85 	bl	80056c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80057b6:	e024      	b.n	8005802 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <prvProcessTimerOrBlockTask+0x90>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <prvProcessTimerOrBlockTask+0x50>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <prvProcessTimerOrBlockTask+0x52>
 80057cc:	2300      	movs	r3, #0
 80057ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <prvProcessTimerOrBlockTask+0x94>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4619      	mov	r1, r3
 80057de:	f7fe ff19 	bl	8004614 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80057e2:	f7ff f917 	bl	8004a14 <xTaskResumeAll>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <prvProcessTimerOrBlockTask+0x98>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
    }
 80057fc:	e001      	b.n	8005802 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80057fe:	f7ff f909 	bl	8004a14 <xTaskResumeAll>
    }
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20012d78 	.word	0x20012d78
 8005810:	20012d7c 	.word	0x20012d7c
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <prvGetNextExpireTime+0x44>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <prvGetNextExpireTime+0x16>
 800582a:	2201      	movs	r2, #1
 800582c:	e000      	b.n	8005830 <prvGetNextExpireTime+0x18>
 800582e:	2200      	movs	r2, #0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <prvGetNextExpireTime+0x44>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e001      	b.n	800584c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800584c:	68fb      	ldr	r3, [r7, #12]
    }
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20012d74 	.word	0x20012d74

08005860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005868:	f7ff f970 	bl	8004b4c <xTaskGetTickCount>
 800586c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <prvSampleTimeNow+0x3c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d205      	bcs.n	8005884 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005878:	f000 f918 	bl	8005aac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e002      	b.n	800588a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800588a:	4a04      	ldr	r2, [pc, #16]	; (800589c <prvSampleTimeNow+0x3c>)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005890:	68fb      	ldr	r3, [r7, #12]
    }
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20012d84 	.word	0x20012d84

080058a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d812      	bhi.n	80058ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e01b      	b.n	8005912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <prvInsertTimerInActiveList+0x7c>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fd ffe0 	bl	80038aa <vListInsert>
 80058ea:	e012      	b.n	8005912 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d206      	bcs.n	8005902 <prvInsertTimerInActiveList+0x62>
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80058fc:	2301      	movs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e007      	b.n	8005912 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <prvInsertTimerInActiveList+0x80>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7fd ffcc 	bl	80038aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005912:	697b      	ldr	r3, [r7, #20]
    }
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20012d78 	.word	0x20012d78
 8005920:	20012d74 	.word	0x20012d74

08005924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800592a:	e0ac      	b.n	8005a86 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f2c0 80a8 	blt.w	8005a84 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd ffe9 	bl	800391c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff87 	bl	8005860 <prvSampleTimeNow>
 8005952:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b09      	cmp	r3, #9
 8005958:	f200 8095 	bhi.w	8005a86 <prvProcessReceivedCommands+0x162>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <prvProcessReceivedCommands+0x40>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	0800598d 	.word	0x0800598d
 8005968:	0800598d 	.word	0x0800598d
 800596c:	0800598d 	.word	0x0800598d
 8005970:	080059ff 	.word	0x080059ff
 8005974:	08005a13 	.word	0x08005a13
 8005978:	08005a5b 	.word	0x08005a5b
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800598d 	.word	0x0800598d
 8005984:	080059ff 	.word	0x080059ff
 8005988:	08005a13 	.word	0x08005a13
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	18d1      	adds	r1, r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ac:	f7ff ff78 	bl	80058a0 <prvInsertTimerInActiveList>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d067      	beq.n	8005a86 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059bc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05c      	beq.n	8005a86 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	441a      	add	r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	2100      	movs	r1, #0
 80059dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059de:	f7ff fe23 	bl	8005628 <xTimerGenericCommand>
 80059e2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d14d      	bne.n	8005a86 <prvProcessReceivedCommands+0x162>
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	e7fe      	b.n	80059fc <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005a10:	e039      	b.n	8005a86 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <prvProcessReceivedCommands+0x122>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e7fe      	b.n	8005a44 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	18d1      	adds	r1, r2, r3
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a54:	f7ff ff24 	bl	80058a0 <prvInsertTimerInActiveList>
                        break;
 8005a58:	e015      	b.n	8005a86 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8005a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a6a:	f7fd fdb9 	bl	80035e0 <vPortFree>
 8005a6e:	e00a      	b.n	8005a86 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005a82:	e000      	b.n	8005a86 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005a84:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a86:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <prvProcessReceivedCommands+0x184>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f107 0108 	add.w	r1, r7, #8
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fa8b 	bl	8003fac <xQueueReceive>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f47f af47 	bne.w	800592c <prvProcessReceivedCommands+0x8>
        }
    }
 8005a9e:	bf00      	nop
 8005aa0:	3728      	adds	r7, #40	; 0x28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20012d7c 	.word	0x20012d7c

08005aac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ab2:	e047      	b.n	8005b44 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab4:	4b2d      	ldr	r3, [pc, #180]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fd ff25 	bl	800391c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02d      	beq.n	8005b44 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d90e      	bls.n	8005b18 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b06:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f7fd feca 	bl	80038aa <vListInsert>
 8005b16:	e015      	b.n	8005b44 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fd80 	bl	8005628 <xTimerGenericCommand>
 8005b28:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <prvSwitchTimerLists+0x98>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	e7fe      	b.n	8005b42 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1b2      	bne.n	8005ab4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <prvSwitchTimerLists+0xc4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a04      	ldr	r2, [pc, #16]	; (8005b6c <prvSwitchTimerLists+0xc0>)
 8005b5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005b5c:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <prvSwitchTimerLists+0xc4>)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6013      	str	r3, [r2, #0]
    }
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20012d74 	.word	0x20012d74
 8005b70:	20012d78 	.word	0x20012d78

08005b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005b78:	f000 f958 	bl	8005e2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005b7c:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <prvCheckForValidListAndQueue+0x54>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11d      	bne.n	8005bc0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005b84:	4811      	ldr	r0, [pc, #68]	; (8005bcc <prvCheckForValidListAndQueue+0x58>)
 8005b86:	f7fd fe3f 	bl	8003808 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005b8a:	4811      	ldr	r0, [pc, #68]	; (8005bd0 <prvCheckForValidListAndQueue+0x5c>)
 8005b8c:	f7fd fe3c 	bl	8003808 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005b90:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <prvCheckForValidListAndQueue+0x60>)
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <prvCheckForValidListAndQueue+0x58>)
 8005b94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <prvCheckForValidListAndQueue+0x64>)
 8005b98:	4a0d      	ldr	r2, [pc, #52]	; (8005bd0 <prvCheckForValidListAndQueue+0x5c>)
 8005b9a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	210c      	movs	r1, #12
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	f7fd ff4d 	bl	8003a40 <xQueueGenericCreate>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvCheckForValidListAndQueue+0x54>)
 8005baa:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <prvCheckForValidListAndQueue+0x54>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <prvCheckForValidListAndQueue+0x54>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4908      	ldr	r1, [pc, #32]	; (8005bdc <prvCheckForValidListAndQueue+0x68>)
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fd02 	bl	80045c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005bc0:	f000 f962 	bl	8005e88 <vPortExitCritical>
    }
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20012d7c 	.word	0x20012d7c
 8005bcc:	20012d4c 	.word	0x20012d4c
 8005bd0:	20012d60 	.word	0x20012d60
 8005bd4:	20012d74 	.word	0x20012d74
 8005bd8:	20012d78 	.word	0x20012d78
 8005bdc:	08006108 	.word	0x08006108

08005be0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b04      	subs	r3, #4
 8005bf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3b04      	subs	r3, #4
 8005bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c10:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <pxPortInitialiseStack+0x64>)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3b14      	subs	r3, #20
 8005c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f06f 0202 	mvn.w	r2, #2
 8005c2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b20      	subs	r3, #32
 8005c34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c36:	68fb      	ldr	r3, [r7, #12]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	08005c49 	.word	0x08005c49

08005c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <prvTaskExitError+0x50>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5a:	d009      	beq.n	8005c70 <prvTaskExitError+0x28>
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e7fe      	b.n	8005c6e <prvTaskExitError+0x26>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c82:	bf00      	nop
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0fc      	beq.n	8005c84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000010 	.word	0x20000010
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	20012c48 	.word	0x20012c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	; (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <xPortStartScheduler+0x118>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <xPortStartScheduler+0x11c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <xPortStartScheduler+0x24>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e7fe      	b.n	8005d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d14:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <xPortStartScheduler+0x118>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a3d      	ldr	r2, [pc, #244]	; (8005e10 <xPortStartScheduler+0x120>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d109      	bne.n	8005d32 <xPortStartScheduler+0x42>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e7fe      	b.n	8005d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <xPortStartScheduler+0x124>)
 8005d34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <xPortStartScheduler+0x128>)
 8005d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d60:	e009      	b.n	8005d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d0ef      	beq.n	8005d62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d82:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1c3 0307 	rsb	r3, r3, #7
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d009      	beq.n	8005da2 <xPortStartScheduler+0xb2>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	e7fe      	b.n	8005da0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <xPortStartScheduler+0x12c>)
 8005db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dc0:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <xPortStartScheduler+0x130>)
 8005dd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dd8:	f000 f8d6 	bl	8005f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xPortStartScheduler+0x134>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005de2:	f000 f8f5 	bl	8005fd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <xPortStartScheduler+0x138>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <xPortStartScheduler+0x138>)
 8005dec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005df0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005df2:	f7ff ff69 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005df6:	f7fe ff71 	bl	8004cdc <vTaskSwitchContext>
	prvTaskExitError();
 8005dfa:	f7ff ff25 	bl	8005c48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed00 	.word	0xe000ed00
 8005e0c:	410fc271 	.word	0x410fc271
 8005e10:	410fc270 	.word	0x410fc270
 8005e14:	e000e400 	.word	0xe000e400
 8005e18:	20012d88 	.word	0x20012d88
 8005e1c:	20012d8c 	.word	0x20012d8c
 8005e20:	e000ed20 	.word	0xe000ed20
 8005e24:	20000010 	.word	0x20000010
 8005e28:	e000ef34 	.word	0xe000ef34

08005e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e44:	4b0e      	ldr	r3, [pc, #56]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <vPortEnterCritical+0x54>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10e      	bne.n	8005e74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <vPortEnterCritical+0x58>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <vPortEnterCritical+0x48>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	e7fe      	b.n	8005e72 <vPortEnterCritical+0x46>
	}
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000010 	.word	0x20000010
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <vPortExitCritical+0x22>
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	e7fe      	b.n	8005ea8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	4a08      	ldr	r2, [pc, #32]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <vPortExitCritical+0x4c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <vPortExitCritical+0x3e>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000010 	.word	0x20000010
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7fe fee4 	bl	8004cdc <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	20012c48 	.word	0x20012c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f60:	f7fe fe04 	bl	8004b6c <xTaskIncrementTick>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <SysTick_Handler+0x3c>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	2300      	movs	r3, #0
 8005f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <vPortSetupTimerInterrupt+0x34>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x38>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <vPortSetupTimerInterrupt+0x3c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x40>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	099b      	lsrs	r3, r3, #6
 8005fa4:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <vPortSetupTimerInterrupt+0x44>)
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <vPortSetupTimerInterrupt+0x34>)
 8005fac:	2207      	movs	r2, #7
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000e010 	.word	0xe000e010
 8005fc0:	e000e018 	.word	0xe000e018
 8005fc4:	20000004 	.word	0x20000004
 8005fc8:	10624dd3 	.word	0x10624dd3
 8005fcc:	e000e014 	.word	0xe000e014

08005fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe0 <vPortEnableVFP+0x10>
 8005fd4:	6801      	ldr	r1, [r0, #0]
 8005fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fda:	6001      	str	r1, [r0, #0]
 8005fdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fde:	bf00      	nop
 8005fe0:	e000ed88 	.word	0xe000ed88

08005fe4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fea:	f3ef 8305 	mrs	r3, IPSR
 8005fee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	d913      	bls.n	800601e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <vPortValidateInterruptPriority+0x6c>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <vPortValidateInterruptPriority+0x70>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	7afa      	ldrb	r2, [r7, #11]
 8006006:	429a      	cmp	r2, r3
 8006008:	d209      	bcs.n	800601e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e7fe      	b.n	800601c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <vPortValidateInterruptPriority+0x74>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <vPortValidateInterruptPriority+0x78>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d909      	bls.n	8006042 <vPortValidateInterruptPriority+0x5e>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	e7fe      	b.n	8006040 <vPortValidateInterruptPriority+0x5c>
	}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	e000e3f0 	.word	0xe000e3f0
 8006054:	20012d88 	.word	0x20012d88
 8006058:	e000ed0c 	.word	0xe000ed0c
 800605c:	20012d8c 	.word	0x20012d8c

08006060 <__libc_init_array>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	4e0d      	ldr	r6, [pc, #52]	; (8006098 <__libc_init_array+0x38>)
 8006064:	4c0d      	ldr	r4, [pc, #52]	; (800609c <__libc_init_array+0x3c>)
 8006066:	1ba4      	subs	r4, r4, r6
 8006068:	10a4      	asrs	r4, r4, #2
 800606a:	2500      	movs	r5, #0
 800606c:	42a5      	cmp	r5, r4
 800606e:	d109      	bne.n	8006084 <__libc_init_array+0x24>
 8006070:	4e0b      	ldr	r6, [pc, #44]	; (80060a0 <__libc_init_array+0x40>)
 8006072:	4c0c      	ldr	r4, [pc, #48]	; (80060a4 <__libc_init_array+0x44>)
 8006074:	f000 f82c 	bl	80060d0 <_init>
 8006078:	1ba4      	subs	r4, r4, r6
 800607a:	10a4      	asrs	r4, r4, #2
 800607c:	2500      	movs	r5, #0
 800607e:	42a5      	cmp	r5, r4
 8006080:	d105      	bne.n	800608e <__libc_init_array+0x2e>
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006088:	4798      	blx	r3
 800608a:	3501      	adds	r5, #1
 800608c:	e7ee      	b.n	800606c <__libc_init_array+0xc>
 800608e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006092:	4798      	blx	r3
 8006094:	3501      	adds	r5, #1
 8006096:	e7f2      	b.n	800607e <__libc_init_array+0x1e>
 8006098:	08006130 	.word	0x08006130
 800609c:	08006130 	.word	0x08006130
 80060a0:	08006130 	.word	0x08006130
 80060a4:	08006134 	.word	0x08006134

080060a8 <memcpy>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	1e43      	subs	r3, r0, #1
 80060ac:	440a      	add	r2, r1
 80060ae:	4291      	cmp	r1, r2
 80060b0:	d100      	bne.n	80060b4 <memcpy+0xc>
 80060b2:	bd10      	pop	{r4, pc}
 80060b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060bc:	e7f7      	b.n	80060ae <memcpy+0x6>

080060be <memset>:
 80060be:	4402      	add	r2, r0
 80060c0:	4603      	mov	r3, r0
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d100      	bne.n	80060c8 <memset+0xa>
 80060c6:	4770      	bx	lr
 80060c8:	f803 1b01 	strb.w	r1, [r3], #1
 80060cc:	e7f9      	b.n	80060c2 <memset+0x4>
	...

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr
